                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _normal
                                     12 	.globl _fast
                                     13 	.globl _freq
                                     14 	.globl _counter
                                     15 	.globl _cymomer
                                     16 	.globl _LedDigit
                                     17 	.globl _LedSegs
                                     18 	.globl _main
                                     19 	.globl _setmode
                                     20 	.globl _readKey
                                     21 	.globl _reset
                                     22 	.globl _getFreq
                                     23 	.globl _getCount
                                     24 	.globl _putlong
                                     25 	.globl _putstr
                                     26 	.globl _timer2
                                     27 	.globl _serialPort
                                     28 	.globl _counter1
                                     29 	.globl _counter0
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _FL
                                     37 	.globl _P
                                     38 	.globl _TF2
                                     39 	.globl _EXF2
                                     40 	.globl _RCLK
                                     41 	.globl _TCLK
                                     42 	.globl _EXEN2
                                     43 	.globl _TR2
                                     44 	.globl _C_T2
                                     45 	.globl _CP_RL2
                                     46 	.globl _T2CON_7
                                     47 	.globl _T2CON_6
                                     48 	.globl _T2CON_5
                                     49 	.globl _T2CON_4
                                     50 	.globl _T2CON_3
                                     51 	.globl _T2CON_2
                                     52 	.globl _T2CON_1
                                     53 	.globl _T2CON_0
                                     54 	.globl _PT2
                                     55 	.globl _PS
                                     56 	.globl _PT1
                                     57 	.globl _PX1
                                     58 	.globl _PT0
                                     59 	.globl _PX0
                                     60 	.globl _RD
                                     61 	.globl _WR
                                     62 	.globl _T1
                                     63 	.globl _T0
                                     64 	.globl _INT1
                                     65 	.globl _INT0
                                     66 	.globl _TXD
                                     67 	.globl _RXD
                                     68 	.globl _P3_7
                                     69 	.globl _P3_6
                                     70 	.globl _P3_5
                                     71 	.globl _P3_4
                                     72 	.globl _P3_3
                                     73 	.globl _P3_2
                                     74 	.globl _P3_1
                                     75 	.globl _P3_0
                                     76 	.globl _EA
                                     77 	.globl _ET2
                                     78 	.globl _ES
                                     79 	.globl _ET1
                                     80 	.globl _EX1
                                     81 	.globl _ET0
                                     82 	.globl _EX0
                                     83 	.globl _P2_7
                                     84 	.globl _P2_6
                                     85 	.globl _P2_5
                                     86 	.globl _P2_4
                                     87 	.globl _P2_3
                                     88 	.globl _P2_2
                                     89 	.globl _P2_1
                                     90 	.globl _P2_0
                                     91 	.globl _SM0
                                     92 	.globl _SM1
                                     93 	.globl _SM2
                                     94 	.globl _REN
                                     95 	.globl _TB8
                                     96 	.globl _RB8
                                     97 	.globl _TI
                                     98 	.globl _RI
                                     99 	.globl _T2EX
                                    100 	.globl _T2
                                    101 	.globl _P1_7
                                    102 	.globl _P1_6
                                    103 	.globl _P1_5
                                    104 	.globl _P1_4
                                    105 	.globl _P1_3
                                    106 	.globl _P1_2
                                    107 	.globl _P1_1
                                    108 	.globl _P1_0
                                    109 	.globl _TF1
                                    110 	.globl _TR1
                                    111 	.globl _TF0
                                    112 	.globl _TR0
                                    113 	.globl _IE1
                                    114 	.globl _IT1
                                    115 	.globl _IE0
                                    116 	.globl _IT0
                                    117 	.globl _P0_7
                                    118 	.globl _P0_6
                                    119 	.globl _P0_5
                                    120 	.globl _P0_4
                                    121 	.globl _P0_3
                                    122 	.globl _P0_2
                                    123 	.globl _P0_1
                                    124 	.globl _P0_0
                                    125 	.globl _B
                                    126 	.globl _A
                                    127 	.globl _ACC
                                    128 	.globl _PSW
                                    129 	.globl _TH2
                                    130 	.globl _TL2
                                    131 	.globl _RCAP2H
                                    132 	.globl _RCAP2L
                                    133 	.globl _T2MOD
                                    134 	.globl _T2CON
                                    135 	.globl _IP
                                    136 	.globl _P3
                                    137 	.globl _IE
                                    138 	.globl _P2
                                    139 	.globl _SBUF
                                    140 	.globl _SCON
                                    141 	.globl _P1
                                    142 	.globl _TH1
                                    143 	.globl _TH0
                                    144 	.globl _TL1
                                    145 	.globl _TL0
                                    146 	.globl _TMOD
                                    147 	.globl _TCON
                                    148 	.globl _PCON
                                    149 	.globl _DPH
                                    150 	.globl _DPL
                                    151 	.globl _SP
                                    152 	.globl _P0
                                    153 	.globl _longdown
                                    154 	.globl _gatelost
                                    155 	.globl _overflow
                                    156 	.globl _ledReady
                                    157 	.globl _leds
                                    158 	.globl _mode
                                    159 	.globl _freqcount
                                    160 	.globl _incount
                                    161 	.globl _freqCnt
                                    162 	.globl _inCnt
                                    163 	.globl _mainFreq
                                    164 	.globl _delay
                                    165 	.globl _keydly
                                    166 	.globl _speed
                                    167 	.globl _gateDelay
                                    168 	.globl _msTick
                                    169 	.globl _led_d
                                    170 	.globl _num_i
                                    171 	.globl _led_i
                                    172 ;--------------------------------------------------------
                                    173 ; special function registers
                                    174 ;--------------------------------------------------------
                                    175 	.area RSEG    (ABS,DATA)
      000000                        176 	.org 0x0000
                           000080   177 _P0	=	0x0080
                           000081   178 _SP	=	0x0081
                           000082   179 _DPL	=	0x0082
                           000083   180 _DPH	=	0x0083
                           000087   181 _PCON	=	0x0087
                           000088   182 _TCON	=	0x0088
                           000089   183 _TMOD	=	0x0089
                           00008A   184 _TL0	=	0x008a
                           00008B   185 _TL1	=	0x008b
                           00008C   186 _TH0	=	0x008c
                           00008D   187 _TH1	=	0x008d
                           000090   188 _P1	=	0x0090
                           000098   189 _SCON	=	0x0098
                           000099   190 _SBUF	=	0x0099
                           0000A0   191 _P2	=	0x00a0
                           0000A8   192 _IE	=	0x00a8
                           0000B0   193 _P3	=	0x00b0
                           0000B8   194 _IP	=	0x00b8
                           0000C8   195 _T2CON	=	0x00c8
                           0000C9   196 _T2MOD	=	0x00c9
                           0000CA   197 _RCAP2L	=	0x00ca
                           0000CB   198 _RCAP2H	=	0x00cb
                           0000CC   199 _TL2	=	0x00cc
                           0000CD   200 _TH2	=	0x00cd
                           0000D0   201 _PSW	=	0x00d0
                           0000E0   202 _ACC	=	0x00e0
                           0000E0   203 _A	=	0x00e0
                           0000F0   204 _B	=	0x00f0
                                    205 ;--------------------------------------------------------
                                    206 ; special function bits
                                    207 ;--------------------------------------------------------
                                    208 	.area RSEG    (ABS,DATA)
      000000                        209 	.org 0x0000
                           000080   210 _P0_0	=	0x0080
                           000081   211 _P0_1	=	0x0081
                           000082   212 _P0_2	=	0x0082
                           000083   213 _P0_3	=	0x0083
                           000084   214 _P0_4	=	0x0084
                           000085   215 _P0_5	=	0x0085
                           000086   216 _P0_6	=	0x0086
                           000087   217 _P0_7	=	0x0087
                           000088   218 _IT0	=	0x0088
                           000089   219 _IE0	=	0x0089
                           00008A   220 _IT1	=	0x008a
                           00008B   221 _IE1	=	0x008b
                           00008C   222 _TR0	=	0x008c
                           00008D   223 _TF0	=	0x008d
                           00008E   224 _TR1	=	0x008e
                           00008F   225 _TF1	=	0x008f
                           000090   226 _P1_0	=	0x0090
                           000091   227 _P1_1	=	0x0091
                           000092   228 _P1_2	=	0x0092
                           000093   229 _P1_3	=	0x0093
                           000094   230 _P1_4	=	0x0094
                           000095   231 _P1_5	=	0x0095
                           000096   232 _P1_6	=	0x0096
                           000097   233 _P1_7	=	0x0097
                           000090   234 _T2	=	0x0090
                           000091   235 _T2EX	=	0x0091
                           000098   236 _RI	=	0x0098
                           000099   237 _TI	=	0x0099
                           00009A   238 _RB8	=	0x009a
                           00009B   239 _TB8	=	0x009b
                           00009C   240 _REN	=	0x009c
                           00009D   241 _SM2	=	0x009d
                           00009E   242 _SM1	=	0x009e
                           00009F   243 _SM0	=	0x009f
                           0000A0   244 _P2_0	=	0x00a0
                           0000A1   245 _P2_1	=	0x00a1
                           0000A2   246 _P2_2	=	0x00a2
                           0000A3   247 _P2_3	=	0x00a3
                           0000A4   248 _P2_4	=	0x00a4
                           0000A5   249 _P2_5	=	0x00a5
                           0000A6   250 _P2_6	=	0x00a6
                           0000A7   251 _P2_7	=	0x00a7
                           0000A8   252 _EX0	=	0x00a8
                           0000A9   253 _ET0	=	0x00a9
                           0000AA   254 _EX1	=	0x00aa
                           0000AB   255 _ET1	=	0x00ab
                           0000AC   256 _ES	=	0x00ac
                           0000AD   257 _ET2	=	0x00ad
                           0000AF   258 _EA	=	0x00af
                           0000B0   259 _P3_0	=	0x00b0
                           0000B1   260 _P3_1	=	0x00b1
                           0000B2   261 _P3_2	=	0x00b2
                           0000B3   262 _P3_3	=	0x00b3
                           0000B4   263 _P3_4	=	0x00b4
                           0000B5   264 _P3_5	=	0x00b5
                           0000B6   265 _P3_6	=	0x00b6
                           0000B7   266 _P3_7	=	0x00b7
                           0000B0   267 _RXD	=	0x00b0
                           0000B1   268 _TXD	=	0x00b1
                           0000B2   269 _INT0	=	0x00b2
                           0000B3   270 _INT1	=	0x00b3
                           0000B4   271 _T0	=	0x00b4
                           0000B5   272 _T1	=	0x00b5
                           0000B6   273 _WR	=	0x00b6
                           0000B7   274 _RD	=	0x00b7
                           0000B8   275 _PX0	=	0x00b8
                           0000B9   276 _PT0	=	0x00b9
                           0000BA   277 _PX1	=	0x00ba
                           0000BB   278 _PT1	=	0x00bb
                           0000BC   279 _PS	=	0x00bc
                           0000BD   280 _PT2	=	0x00bd
                           0000C8   281 _T2CON_0	=	0x00c8
                           0000C9   282 _T2CON_1	=	0x00c9
                           0000CA   283 _T2CON_2	=	0x00ca
                           0000CB   284 _T2CON_3	=	0x00cb
                           0000CC   285 _T2CON_4	=	0x00cc
                           0000CD   286 _T2CON_5	=	0x00cd
                           0000CE   287 _T2CON_6	=	0x00ce
                           0000CF   288 _T2CON_7	=	0x00cf
                           0000C8   289 _CP_RL2	=	0x00c8
                           0000C9   290 _C_T2	=	0x00c9
                           0000CA   291 _TR2	=	0x00ca
                           0000CB   292 _EXEN2	=	0x00cb
                           0000CC   293 _TCLK	=	0x00cc
                           0000CD   294 _RCLK	=	0x00cd
                           0000CE   295 _EXF2	=	0x00ce
                           0000CF   296 _TF2	=	0x00cf
                           0000D0   297 _P	=	0x00d0
                           0000D1   298 _FL	=	0x00d1
                           0000D2   299 _OV	=	0x00d2
                           0000D3   300 _RS0	=	0x00d3
                           0000D4   301 _RS1	=	0x00d4
                           0000D5   302 _F0	=	0x00d5
                           0000D6   303 _AC	=	0x00d6
                           0000D7   304 _CY	=	0x00d7
                                    305 ;--------------------------------------------------------
                                    306 ; overlayable register banks
                                    307 ;--------------------------------------------------------
                                    308 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        309 	.ds 8
                                    310 ;--------------------------------------------------------
                                    311 ; internal ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area DSEG    (DATA)
      000000                        314 _led_i::
      000000                        315 	.ds 1
      000001                        316 _num_i::
      000001                        317 	.ds 1
      000002                        318 _led_d::
      000002                        319 	.ds 1
      000003                        320 _msTick::
      000003                        321 	.ds 1
      000004                        322 _gateDelay::
      000004                        323 	.ds 1
      000005                        324 _speed::
      000005                        325 	.ds 1
      000006                        326 _keydly::
      000006                        327 	.ds 1
      000007                        328 _delay::
      000007                        329 	.ds 2
      000009                        330 _mainFreq::
      000009                        331 	.ds 4
      00000D                        332 _inCnt::
      00000D                        333 	.ds 4
      000011                        334 _freqCnt::
      000011                        335 	.ds 4
      000015                        336 _incount::
      000015                        337 	.ds 4
      000019                        338 _freqcount::
      000019                        339 	.ds 4
      00001D                        340 _putlong_a_65536_13:
      00001D                        341 	.ds 4
      000021                        342 _readKey_keylong_65536_23:
      000021                        343 	.ds 2
      000023                        344 _readKey_gotkey_65536_23:
      000023                        345 	.ds 1
      000024                        346 _mode::
      000024                        347 	.ds 1
                                    348 ;--------------------------------------------------------
                                    349 ; overlayable items in internal ram 
                                    350 ;--------------------------------------------------------
                                    351 	.area	OSEG    (OVR,DATA)
                                    352 	.area	OSEG    (OVR,DATA)
                                    353 ;--------------------------------------------------------
                                    354 ; Stack segment in internal ram 
                                    355 ;--------------------------------------------------------
                                    356 	.area	SSEG
      000000                        357 __start__stack:
      000000                        358 	.ds	1
                                    359 
                                    360 ;--------------------------------------------------------
                                    361 ; indirectly addressable internal ram data
                                    362 ;--------------------------------------------------------
                                    363 	.area ISEG    (DATA)
      000000                        364 _leds::
      000000                        365 	.ds 8
      000008                        366 _putlong_buf_65536_14:
      000008                        367 	.ds 8
                                    368 ;--------------------------------------------------------
                                    369 ; absolute internal ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area IABS    (ABS,DATA)
                                    372 	.area IABS    (ABS,DATA)
                                    373 ;--------------------------------------------------------
                                    374 ; bit data
                                    375 ;--------------------------------------------------------
                                    376 	.area BSEG    (BIT)
      000000                        377 _ledReady::
      000000                        378 	.ds 1
      000001                        379 _overflow::
      000001                        380 	.ds 1
      000002                        381 _gatelost::
      000002                        382 	.ds 1
      000003                        383 _longdown::
      000003                        384 	.ds 1
      000004                        385 _readKey_longdown_65536_23:
      000004                        386 	.ds 1
                                    387 ;--------------------------------------------------------
                                    388 ; paged external ram data
                                    389 ;--------------------------------------------------------
                                    390 	.area PSEG    (PAG,XDATA)
                                    391 ;--------------------------------------------------------
                                    392 ; external ram data
                                    393 ;--------------------------------------------------------
                                    394 	.area XSEG    (XDATA)
                                    395 ;--------------------------------------------------------
                                    396 ; absolute external ram data
                                    397 ;--------------------------------------------------------
                                    398 	.area XABS    (ABS,XDATA)
                                    399 ;--------------------------------------------------------
                                    400 ; external initialized ram data
                                    401 ;--------------------------------------------------------
                                    402 	.area XISEG   (XDATA)
                                    403 	.area HOME    (CODE)
                                    404 	.area GSINIT0 (CODE)
                                    405 	.area GSINIT1 (CODE)
                                    406 	.area GSINIT2 (CODE)
                                    407 	.area GSINIT3 (CODE)
                                    408 	.area GSINIT4 (CODE)
                                    409 	.area GSINIT5 (CODE)
                                    410 	.area GSINIT  (CODE)
                                    411 	.area GSFINAL (CODE)
                                    412 	.area CSEG    (CODE)
                                    413 ;--------------------------------------------------------
                                    414 ; interrupt vector 
                                    415 ;--------------------------------------------------------
                                    416 	.area HOME    (CODE)
      000000                        417 __interrupt_vect:
      000000 02r00r00         [24]  418 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  419 	reti
      000004                        420 	.ds	7
      00000B 02r00r00         [24]  421 	ljmp	_counter0
      00000E                        422 	.ds	5
      000013 32               [24]  423 	reti
      000014                        424 	.ds	7
      00001B 02r00r0A         [24]  425 	ljmp	_counter1
      00001E                        426 	.ds	5
      000023 02r00r14         [24]  427 	ljmp	_serialPort
      000026                        428 	.ds	5
      00002B 02r00r40         [24]  429 	ljmp	_timer2
                                    430 ;--------------------------------------------------------
                                    431 ; global & static initialisations
                                    432 ;--------------------------------------------------------
                                    433 	.area HOME    (CODE)
                                    434 	.area GSINIT  (CODE)
                                    435 	.area GSFINAL (CODE)
                                    436 	.area GSINIT  (CODE)
                                    437 	.globl __sdcc_gsinit_startup
                                    438 	.globl __sdcc_program_startup
                                    439 	.globl __start__stack
                                    440 	.globl __mcs51_genXINIT
                                    441 	.globl __mcs51_genXRAMCLEAR
                                    442 	.globl __mcs51_genRAMCLEAR
                                    443 ;------------------------------------------------------------
                                    444 ;Allocation info for local variables in function 'readKey'
                                    445 ;------------------------------------------------------------
                                    446 ;keylong                   Allocated with name '_readKey_keylong_65536_23'
                                    447 ;gotkey                    Allocated with name '_readKey_gotkey_65536_23'
                                    448 ;k                         Allocated to registers r7 
                                    449 ;key                       Allocated to registers r6 
                                    450 ;------------------------------------------------------------
                                    451 ;	main.c:133: static __bit longdown=false;
                                    452 ;	assignBit
      000000 C2*04            [12]  453 	clr	_readKey_longdown_65536_23
                                    454 ;	main.c:134: static unsigned int keylong=KEYLONG;
      000002 75*21 F4         [24]  455 	mov	_readKey_keylong_65536_23,#0xf4
      000005 75*22 01         [24]  456 	mov	(_readKey_keylong_65536_23 + 1),#0x01
                                    457 ;	main.c:136: static unsigned char gotkey=0;
      000008 75*23 00         [24]  458 	mov	_readKey_gotkey_65536_23,#0x00
                                    459 ;	main.c:21: char led_i,num_i=0;
      00000B 75*01 00         [24]  460 	mov	_num_i,#0x00
                                    461 ;	main.c:24: unsigned char msTick=0,gateDelay=0,speed=NORMAL,keydly=KEYDLY;
      00000E 75*03 00         [24]  462 	mov	_msTick,#0x00
                                    463 ;	main.c:24: unsigned int delay=0;
      000011 75*04 00         [24]  464 	mov	_gateDelay,#0x00
                                    465 ;	main.c:24: unsigned char msTick=0,gateDelay=0,speed=NORMAL,keydly=KEYDLY;
      000014 75*05 64         [24]  466 	mov	_speed,#0x64
                                    467 ;	main.c:24: unsigned int delay=0;
      000017 75*06 32         [24]  468 	mov	_keydly,#0x32
                                    469 ;	main.c:25: unsigned long mainFreq=FREQ;
      00001A E4               [12]  470 	clr	a
      00001B F5*07            [12]  471 	mov	_delay,a
      00001D F5*08            [12]  472 	mov	(_delay + 1),a
                                    473 ;	main.c:26: __code char cymomer[]  = {0x63,0x89,0x55,0xc5,0x55,0x21,0xf5,0xff};
      00001F 75*09 80         [24]  474 	mov	_mainFreq,#0x80
      000022 75*0A 96         [24]  475 	mov	(_mainFreq + 1),#0x96
      000025 75*0B 98         [24]  476 	mov	(_mainFreq + 2),#0x98
                                    477 ;	1-genFromRTrack replaced	mov	(_mainFreq + 3),#0x00
      000028 F5*0C            [12]  478 	mov	(_mainFreq + 3),a
                                    479 ;	main.c:156: enum{Freq,Counter} mode=Freq;
                                    480 ;	1-genFromRTrack replaced	mov	_mode,#0x00
      00002A F5*24            [12]  481 	mov	_mode,a
                                    482 ;	main.c:22: __bit ledReady,overflow=false,gatelost=false;
                                    483 ;	assignBit
      00002C C2*01            [12]  484 	clr	_overflow
                                    485 ;	main.c:22: char led_d;
                                    486 ;	assignBit
      00002E C2*02            [12]  487 	clr	_gatelost
                                    488 ;	main.c:130: __bit longdown=false;
                                    489 ;	assignBit
      000030 C2*03            [12]  490 	clr	_longdown
                                    491 	.area GSFINAL (CODE)
      000000 02r00r2E         [24]  492 	ljmp	__sdcc_program_startup
                                    493 ;--------------------------------------------------------
                                    494 ; Home
                                    495 ;--------------------------------------------------------
                                    496 	.area HOME    (CODE)
                                    497 	.area HOME    (CODE)
      00002E                        498 __sdcc_program_startup:
      00002E 02r03r10         [24]  499 	ljmp	_main
                                    500 ;	return from main will return to caller
                                    501 ;--------------------------------------------------------
                                    502 ; code
                                    503 ;--------------------------------------------------------
                                    504 	.area CSEG    (CODE)
                                    505 ;------------------------------------------------------------
                                    506 ;Allocation info for local variables in function 'counter0'
                                    507 ;------------------------------------------------------------
                                    508 ;	main.c:40: void counter0() __interrupt 1{
                                    509 ;	-----------------------------------------
                                    510 ;	 function counter0
                                    511 ;	-----------------------------------------
      000000                        512 _counter0:
                           000007   513 	ar7 = 0x07
                           000006   514 	ar6 = 0x06
                           000005   515 	ar5 = 0x05
                           000004   516 	ar4 = 0x04
                           000003   517 	ar3 = 0x03
                           000002   518 	ar2 = 0x02
                           000001   519 	ar1 = 0x01
                           000000   520 	ar0 = 0x00
      000000 C0 E0            [24]  521 	push	acc
                                    522 ;	main.c:41: ++inCnt.b3;
      000002 E5*10            [12]  523 	mov	a,(_inCnt + 0x0003)
      000004 04               [12]  524 	inc	a
      000005 F5*10            [12]  525 	mov	(_inCnt + 0x0003),a
                                    526 ;	main.c:42: }
      000007 D0 E0            [24]  527 	pop	acc
      000009 32               [24]  528 	reti
                                    529 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    530 ;	eliminated unneeded push/pop ar1
                                    531 ;	eliminated unneeded push/pop ar0
                                    532 ;	eliminated unneeded push/pop psw
                                    533 ;	eliminated unneeded push/pop dpl
                                    534 ;	eliminated unneeded push/pop dph
                                    535 ;	eliminated unneeded push/pop b
                                    536 ;------------------------------------------------------------
                                    537 ;Allocation info for local variables in function 'counter1'
                                    538 ;------------------------------------------------------------
                                    539 ;	main.c:43: void counter1() __interrupt 3{
                                    540 ;	-----------------------------------------
                                    541 ;	 function counter1
                                    542 ;	-----------------------------------------
      00000A                        543 _counter1:
      00000A C0 E0            [24]  544 	push	acc
                                    545 ;	main.c:44: ++freqCnt.b3;
      00000C E5*14            [12]  546 	mov	a,(_freqCnt + 0x0003)
      00000E 04               [12]  547 	inc	a
      00000F F5*14            [12]  548 	mov	(_freqCnt + 0x0003),a
                                    549 ;	main.c:45: }
      000011 D0 E0            [24]  550 	pop	acc
      000013 32               [24]  551 	reti
                                    552 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    553 ;	eliminated unneeded push/pop ar1
                                    554 ;	eliminated unneeded push/pop ar0
                                    555 ;	eliminated unneeded push/pop psw
                                    556 ;	eliminated unneeded push/pop dpl
                                    557 ;	eliminated unneeded push/pop dph
                                    558 ;	eliminated unneeded push/pop b
                                    559 ;------------------------------------------------------------
                                    560 ;Allocation info for local variables in function 'serialPort'
                                    561 ;------------------------------------------------------------
                                    562 ;	main.c:46: void serialPort() __interrupt 4{
                                    563 ;	-----------------------------------------
                                    564 ;	 function serialPort
                                    565 ;	-----------------------------------------
      000014                        566 _serialPort:
      000014 C0 E0            [24]  567 	push	acc
      000016 C0 01            [24]  568 	push	ar1
      000018 C0 D0            [24]  569 	push	psw
      00001A 75 D0 00         [24]  570 	mov	psw,#0x00
                                    571 ;	main.c:47: if(RI)RI=0;
                                    572 ;	assignBit
      00001D 10 98 02         [24]  573 	jbc	_RI,00122$
      000020 80 00            [24]  574 	sjmp	00102$
      000022                        575 00122$:
      000022                        576 00102$:
                                    577 ;	main.c:48: if(TI){
                                    578 ;	main.c:49: TI=0;
                                    579 ;	assignBit
      000022 10 99 02         [24]  580 	jbc	_TI,00123$
      000025 80 12            [24]  581 	sjmp	00108$
      000027                        582 00123$:
                                    583 ;	main.c:50: if(!ledReady){
      000027 20*00 0D         [24]  584 	jb	_ledReady,00104$
                                    585 ;	main.c:51: SBUF=leds[led_i];
      00002A E5*00            [12]  586 	mov	a,_led_i
      00002C 24r00            [12]  587 	add	a,#_leds
      00002E F9               [12]  588 	mov	r1,a
      00002F 87 99            [24]  589 	mov	_SBUF,@r1
                                    590 ;	main.c:52: P3_2=0;
                                    591 ;	assignBit
      000031 C2 B2            [12]  592 	clr	_P3_2
                                    593 ;	main.c:53: ledReady=1;
                                    594 ;	assignBit
      000033 D2*00            [12]  595 	setb	_ledReady
      000035 80 02            [24]  596 	sjmp	00108$
      000037                        597 00104$:
                                    598 ;	main.c:55: P3_2=1;
                                    599 ;	assignBit
      000037 D2 B2            [12]  600 	setb	_P3_2
      000039                        601 00108$:
                                    602 ;	main.c:58: }
      000039 D0 D0            [24]  603 	pop	psw
      00003B D0 01            [24]  604 	pop	ar1
      00003D D0 E0            [24]  605 	pop	acc
      00003F 32               [24]  606 	reti
                                    607 ;	eliminated unneeded push/pop ar0
                                    608 ;	eliminated unneeded push/pop dpl
                                    609 ;	eliminated unneeded push/pop dph
                                    610 ;	eliminated unneeded push/pop b
                                    611 ;------------------------------------------------------------
                                    612 ;Allocation info for local variables in function 'timer2'
                                    613 ;------------------------------------------------------------
                                    614 ;	main.c:59: void timer2(void) __interrupt 5{
                                    615 ;	-----------------------------------------
                                    616 ;	 function timer2
                                    617 ;	-----------------------------------------
      000040                        618 _timer2:
      000040 C0 E0            [24]  619 	push	acc
      000042 C0 82            [24]  620 	push	dpl
      000044 C0 83            [24]  621 	push	dph
      000046 C0 D0            [24]  622 	push	psw
                                    623 ;	main.c:60: TF2=0;
                                    624 ;	assignBit
      000048 C2 CF            [12]  625 	clr	_TF2
                                    626 ;	main.c:61: ledReady=0;
                                    627 ;	assignBit
      00004A C2*00            [12]  628 	clr	_ledReady
                                    629 ;	main.c:62: if(++led_i>7)led_i=0;
      00004C 05*00            [12]  630 	inc	_led_i
      00004E E5*00            [12]  631 	mov	a,_led_i
      000050 24 F8            [12]  632 	add	a,#0xff - 0x07
      000052 50 03            [24]  633 	jnc	00102$
      000054 75*00 00         [24]  634 	mov	_led_i,#0x00
      000057                        635 00102$:
                                    636 ;	main.c:63: SBUF=LedDigit[led_i];
      000057 E5*00            [12]  637 	mov	a,_led_i
      000059 90r00r10         [24]  638 	mov	dptr,#_LedDigit
      00005C 93               [24]  639 	movc	a,@a+dptr
      00005D F5 99            [12]  640 	mov	_SBUF,a
                                    641 ;	main.c:64: if(--msTick==0){
      00005F D5*03 09         [24]  642 	djnz	_msTick,00107$
                                    643 ;	main.c:65: msTick=speed;
      000062 85*05*03         [24]  644 	mov	_msTick,_speed
                                    645 ;	main.c:66: if(gateDelay>0)gateDelay--;
      000065 E5*04            [12]  646 	mov	a,_gateDelay
      000067 60 02            [24]  647 	jz	00107$
      000069 15*04            [12]  648 	dec	_gateDelay
      00006B                        649 00107$:
                                    650 ;	main.c:68: }
      00006B D0 D0            [24]  651 	pop	psw
      00006D D0 83            [24]  652 	pop	dph
      00006F D0 82            [24]  653 	pop	dpl
      000071 D0 E0            [24]  654 	pop	acc
      000073 32               [24]  655 	reti
                                    656 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    657 ;	eliminated unneeded push/pop b
                                    658 ;------------------------------------------------------------
                                    659 ;Allocation info for local variables in function 'putstr'
                                    660 ;------------------------------------------------------------
                                    661 ;s                         Allocated to registers 
                                    662 ;i                         Allocated to registers r4 
                                    663 ;------------------------------------------------------------
                                    664 ;	main.c:72: void putstr(char *s){
                                    665 ;	-----------------------------------------
                                    666 ;	 function putstr
                                    667 ;	-----------------------------------------
      000074                        668 _putstr:
      000074 AD 82            [24]  669 	mov	r5,dpl
      000076 AE 83            [24]  670 	mov	r6,dph
      000078 AF F0            [24]  671 	mov	r7,b
                                    672 ;	main.c:74: do{
      00007A 7C 07            [12]  673 	mov	r4,#0x07
      00007C                        674 00101$:
                                    675 ;	main.c:75: leds[i]=*s;
      00007C EC               [12]  676 	mov	a,r4
      00007D 24r00            [12]  677 	add	a,#_leds
      00007F F9               [12]  678 	mov	r1,a
      000080 8D 82            [24]  679 	mov	dpl,r5
      000082 8E 83            [24]  680 	mov	dph,r6
      000084 8F F0            [24]  681 	mov	b,r7
      000086 12r00r00         [24]  682 	lcall	__gptrget
      000089 FB               [12]  683 	mov	r3,a
      00008A A3               [24]  684 	inc	dptr
      00008B AD 82            [24]  685 	mov	r5,dpl
      00008D AE 83            [24]  686 	mov	r6,dph
      00008F A7 03            [24]  687 	mov	@r1,ar3
                                    688 ;	main.c:76: s++;
                                    689 ;	main.c:77: }while(i--);
      000091 8C 03            [24]  690 	mov	ar3,r4
      000093 1C               [12]  691 	dec	r4
      000094 EB               [12]  692 	mov	a,r3
      000095 70 E5            [24]  693 	jnz	00101$
                                    694 ;	main.c:78: }
      000097 22               [24]  695 	ret
                                    696 ;------------------------------------------------------------
                                    697 ;Allocation info for local variables in function 'putlong'
                                    698 ;------------------------------------------------------------
                                    699 ;a                         Allocated with name '_putlong_a_65536_13'
                                    700 ;i                         Allocated to registers r3 
                                    701 ;c                         Allocated to registers r7 
                                    702 ;buf                       Allocated with name '_putlong_buf_65536_14'
                                    703 ;------------------------------------------------------------
                                    704 ;	main.c:79: void putlong(unsigned long a){
                                    705 ;	-----------------------------------------
                                    706 ;	 function putlong
                                    707 ;	-----------------------------------------
      000098                        708 _putlong:
      000098 85 82*1D         [24]  709 	mov	_putlong_a_65536_13,dpl
      00009B 85 83*1E         [24]  710 	mov	(_putlong_a_65536_13 + 1),dph
      00009E 85 F0*1F         [24]  711 	mov	(_putlong_a_65536_13 + 2),b
      0000A1 F5*20            [12]  712 	mov	(_putlong_a_65536_13 + 3),a
                                    713 ;	main.c:82: for(i=0;i<8;i++){
      0000A3 7B 00            [12]  714 	mov	r3,#0x00
      0000A5                        715 00116$:
                                    716 ;	main.c:83: if(a!=0||i==0){
      0000A5 E5*1D            [12]  717 	mov	a,_putlong_a_65536_13
      0000A7 45*1E            [12]  718 	orl	a,(_putlong_a_65536_13 + 1)
      0000A9 45*1F            [12]  719 	orl	a,(_putlong_a_65536_13 + 2)
      0000AB 45*20            [12]  720 	orl	a,(_putlong_a_65536_13 + 3)
      0000AD 70 03            [24]  721 	jnz	00104$
      0000AF EB               [12]  722 	mov	a,r3
      0000B0 70 67            [24]  723 	jnz	00105$
      0000B2                        724 00104$:
                                    725 ;	main.c:84: c=LedSegs[a%10];
      0000B2 75*00 0A         [24]  726 	mov	__modulong_PARM_2,#0x0a
      0000B5 E4               [12]  727 	clr	a
      0000B6 F5*01            [12]  728 	mov	(__modulong_PARM_2 + 1),a
      0000B8 F5*02            [12]  729 	mov	(__modulong_PARM_2 + 2),a
      0000BA F5*03            [12]  730 	mov	(__modulong_PARM_2 + 3),a
      0000BC 85*1D 82         [24]  731 	mov	dpl,_putlong_a_65536_13
      0000BF 85*1E 83         [24]  732 	mov	dph,(_putlong_a_65536_13 + 1)
      0000C2 85*1F F0         [24]  733 	mov	b,(_putlong_a_65536_13 + 2)
      0000C5 E5*20            [12]  734 	mov	a,(_putlong_a_65536_13 + 3)
      0000C7 C0 03            [24]  735 	push	ar3
      0000C9 12r00r00         [24]  736 	lcall	__modulong
      0000CC AA 82            [24]  737 	mov	r2,dpl
      0000CE AD 83            [24]  738 	mov	r5,dph
      0000D0 D0 03            [24]  739 	pop	ar3
      0000D2 EA               [12]  740 	mov	a,r2
      0000D3 24r00            [12]  741 	add	a,#_LedSegs
      0000D5 F5 82            [12]  742 	mov	dpl,a
      0000D7 ED               [12]  743 	mov	a,r5
      0000D8 34s00            [12]  744 	addc	a,#(_LedSegs >> 8)
      0000DA F5 83            [12]  745 	mov	dph,a
      0000DC E4               [12]  746 	clr	a
      0000DD 93               [24]  747 	movc	a,@a+dptr
      0000DE FF               [12]  748 	mov	r7,a
                                    749 ;	main.c:85: if(i==3||i==6)c&=0xfe;
      0000DF BB 03 02         [24]  750 	cjne	r3,#0x03,00158$
      0000E2 80 03            [24]  751 	sjmp	00101$
      0000E4                        752 00158$:
      0000E4 BB 06 03         [24]  753 	cjne	r3,#0x06,00102$
      0000E7                        754 00101$:
      0000E7 53 07 FE         [24]  755 	anl	ar7,#0xfe
      0000EA                        756 00102$:
                                    757 ;	main.c:86: buf[i]=c;
      0000EA EB               [12]  758 	mov	a,r3
      0000EB 24r08            [12]  759 	add	a,#_putlong_buf_65536_14
      0000ED F8               [12]  760 	mov	r0,a
      0000EE A6 07            [24]  761 	mov	@r0,ar7
                                    762 ;	main.c:87: a/=10;
      0000F0 75*00 0A         [24]  763 	mov	__divulong_PARM_2,#0x0a
      0000F3 E4               [12]  764 	clr	a
      0000F4 F5*01            [12]  765 	mov	(__divulong_PARM_2 + 1),a
      0000F6 F5*02            [12]  766 	mov	(__divulong_PARM_2 + 2),a
      0000F8 F5*03            [12]  767 	mov	(__divulong_PARM_2 + 3),a
      0000FA 85*1D 82         [24]  768 	mov	dpl,_putlong_a_65536_13
      0000FD 85*1E 83         [24]  769 	mov	dph,(_putlong_a_65536_13 + 1)
      000100 85*1F F0         [24]  770 	mov	b,(_putlong_a_65536_13 + 2)
      000103 E5*20            [12]  771 	mov	a,(_putlong_a_65536_13 + 3)
      000105 C0 03            [24]  772 	push	ar3
      000107 12r00r00         [24]  773 	lcall	__divulong
      00010A 85 82*1D         [24]  774 	mov	_putlong_a_65536_13,dpl
      00010D 85 83*1E         [24]  775 	mov	(_putlong_a_65536_13 + 1),dph
      000110 85 F0*1F         [24]  776 	mov	(_putlong_a_65536_13 + 2),b
      000113 F5*20            [12]  777 	mov	(_putlong_a_65536_13 + 3),a
      000115 D0 03            [24]  778 	pop	ar3
      000117 80 06            [24]  779 	sjmp	00117$
      000119                        780 00105$:
                                    781 ;	main.c:89: buf[i]=0xff;
      000119 EB               [12]  782 	mov	a,r3
      00011A 24r08            [12]  783 	add	a,#_putlong_buf_65536_14
      00011C F8               [12]  784 	mov	r0,a
      00011D 76 FF            [12]  785 	mov	@r0,#0xff
      00011F                        786 00117$:
                                    787 ;	main.c:82: for(i=0;i<8;i++){
      00011F 0B               [12]  788 	inc	r3
      000120 BB 08 00         [24]  789 	cjne	r3,#0x08,00161$
      000123                        790 00161$:
      000123 50 03            [24]  791 	jnc	00162$
      000125 02r00rA5         [24]  792 	ljmp	00116$
      000128                        793 00162$:
                                    794 ;	main.c:92: if(a>0)overflow=true;
      000128 E5*1D            [12]  795 	mov	a,_putlong_a_65536_13
      00012A 45*1E            [12]  796 	orl	a,(_putlong_a_65536_13 + 1)
      00012C 45*1F            [12]  797 	orl	a,(_putlong_a_65536_13 + 2)
      00012E 45*20            [12]  798 	orl	a,(_putlong_a_65536_13 + 3)
      000130 60 02            [24]  799 	jz	00110$
                                    800 ;	assignBit
      000132 D2*01            [12]  801 	setb	_overflow
      000134                        802 00110$:
                                    803 ;	main.c:93: if(overflow)buf[7]&=0xfe;
      000134 30*01 0A         [24]  804 	jnb	_overflow,00112$
      000137 78r0F            [12]  805 	mov	r0,#(_putlong_buf_65536_14 + 0x0007)
      000139 86 07            [24]  806 	mov	ar7,@r0
      00013B 74 FE            [12]  807 	mov	a,#0xfe
      00013D 5F               [12]  808 	anl	a,r7
      00013E 78r0F            [12]  809 	mov	r0,#(_putlong_buf_65536_14 + 0x0007)
      000140 F6               [12]  810 	mov	@r0,a
      000141                        811 00112$:
                                    812 ;	main.c:94: if(gatelost)buf[0]&=0xfe;
      000141 30*02 0A         [24]  813 	jnb	_gatelost,00129$
      000144 78r08            [12]  814 	mov	r0,#_putlong_buf_65536_14
      000146 86 07            [24]  815 	mov	ar7,@r0
      000148 74 FE            [12]  816 	mov	a,#0xfe
      00014A 5F               [12]  817 	anl	a,r7
      00014B 78r08            [12]  818 	mov	r0,#_putlong_buf_65536_14
      00014D F6               [12]  819 	mov	@r0,a
                                    820 ;	main.c:95: for(i=0;i<8;i++)leds[i]=buf[i];
      00014E                        821 00129$:
      00014E 7F 00            [12]  822 	mov	r7,#0x00
      000150                        823 00118$:
      000150 EF               [12]  824 	mov	a,r7
      000151 24r00            [12]  825 	add	a,#_leds
      000153 F9               [12]  826 	mov	r1,a
      000154 EF               [12]  827 	mov	a,r7
      000155 24r08            [12]  828 	add	a,#_putlong_buf_65536_14
      000157 F8               [12]  829 	mov	r0,a
      000158 86 06            [24]  830 	mov	ar6,@r0
      00015A A7 06            [24]  831 	mov	@r1,ar6
      00015C 0F               [12]  832 	inc	r7
      00015D BF 08 00         [24]  833 	cjne	r7,#0x08,00166$
      000160                        834 00166$:
      000160 40 EE            [24]  835 	jc	00118$
                                    836 ;	main.c:96: }
      000162 22               [24]  837 	ret
                                    838 ;------------------------------------------------------------
                                    839 ;Allocation info for local variables in function 'getCount'
                                    840 ;------------------------------------------------------------
                                    841 ;	main.c:100: unsigned long getCount(){
                                    842 ;	-----------------------------------------
                                    843 ;	 function getCount
                                    844 ;	-----------------------------------------
      000163                        845 _getCount:
                                    846 ;	main.c:101: inCnt.b0=P0;
      000163 85 80*0D         [24]  847 	mov	_inCnt,_P0
                                    848 ;	main.c:102: inCnt.b1=TL0;
      000166 85 8A*0E         [24]  849 	mov	(_inCnt + 0x0001),_TL0
                                    850 ;	main.c:103: inCnt.b2=TH0;
      000169 85 8C*0F         [24]  851 	mov	(_inCnt + 0x0002),_TH0
                                    852 ;	main.c:104: return inCnt.l;
      00016C 85*0D 82         [24]  853 	mov	dpl,_inCnt
      00016F 85*0E 83         [24]  854 	mov	dph,(_inCnt + 1)
      000172 85*0F F0         [24]  855 	mov	b,(_inCnt + 2)
      000175 E5*10            [12]  856 	mov	a,(_inCnt + 3)
                                    857 ;	main.c:105: }
      000177 22               [24]  858 	ret
                                    859 ;------------------------------------------------------------
                                    860 ;Allocation info for local variables in function 'getFreq'
                                    861 ;------------------------------------------------------------
                                    862 ;	main.c:106: unsigned long getFreq(){
                                    863 ;	-----------------------------------------
                                    864 ;	 function getFreq
                                    865 ;	-----------------------------------------
      000178                        866 _getFreq:
                                    867 ;	main.c:107: if(freqcount==0)return 0;
      000178 E5*19            [12]  868 	mov	a,_freqcount
      00017A 45*1A            [12]  869 	orl	a,(_freqcount + 1)
      00017C 45*1B            [12]  870 	orl	a,(_freqcount + 2)
      00017E 45*1C            [12]  871 	orl	a,(_freqcount + 3)
      000180 70 07            [24]  872 	jnz	00102$
      000182 90 00 00         [24]  873 	mov	dptr,#(0x00&0x00ff)
      000185 E4               [12]  874 	clr	a
      000186 F5 F0            [12]  875 	mov	b,a
      000188 22               [24]  876 	ret
      000189                        877 00102$:
                                    878 ;	main.c:108: return (unsigned long)(((unsigned long long)incount)*mainFreq/freqcount);
      000189 A8*15            [24]  879 	mov	r0,_incount
      00018B A9*16            [24]  880 	mov	r1,(_incount + 1)
      00018D AA*17            [24]  881 	mov	r2,(_incount + 2)
      00018F AB*18            [24]  882 	mov	r3,(_incount + 3)
      000191 7C 00            [12]  883 	mov	r4,#0x00
      000193 7D 00            [12]  884 	mov	r5,#0x00
      000195 7E 00            [12]  885 	mov	r6,#0x00
      000197 7F 00            [12]  886 	mov	r7,#0x00
      000199 85*09*00         [24]  887 	mov	__mullonglong_PARM_2,_mainFreq
      00019C 85*0A*01         [24]  888 	mov	(__mullonglong_PARM_2 + 1),(_mainFreq + 1)
      00019F 85*0B*02         [24]  889 	mov	(__mullonglong_PARM_2 + 2),(_mainFreq + 2)
      0001A2 85*0C*03         [24]  890 	mov	(__mullonglong_PARM_2 + 3),(_mainFreq + 3)
                                    891 ;	1-genFromRTrack replaced	mov	(__mullonglong_PARM_2 + 4),#0x00
      0001A5 8F*04            [24]  892 	mov	(__mullonglong_PARM_2 + 4),r7
                                    893 ;	1-genFromRTrack replaced	mov	(__mullonglong_PARM_2 + 5),#0x00
      0001A7 8F*05            [24]  894 	mov	(__mullonglong_PARM_2 + 5),r7
                                    895 ;	1-genFromRTrack replaced	mov	(__mullonglong_PARM_2 + 6),#0x00
      0001A9 8F*06            [24]  896 	mov	(__mullonglong_PARM_2 + 6),r7
                                    897 ;	1-genFromRTrack replaced	mov	(__mullonglong_PARM_2 + 7),#0x00
      0001AB 8F*07            [24]  898 	mov	(__mullonglong_PARM_2 + 7),r7
      0001AD 88 82            [24]  899 	mov	dpl,r0
      0001AF 89 83            [24]  900 	mov	dph,r1
      0001B1 8A F0            [24]  901 	mov	b,r2
      0001B3 EB               [12]  902 	mov	a,r3
      0001B4 12r00r00         [24]  903 	lcall	__mullonglong
      0001B7 A8 82            [24]  904 	mov	r0,dpl
      0001B9 A9 83            [24]  905 	mov	r1,dph
      0001BB AA F0            [24]  906 	mov	r2,b
      0001BD FB               [12]  907 	mov	r3,a
      0001BE 85*19*00         [24]  908 	mov	__divulonglong_PARM_2,_freqcount
      0001C1 85*1A*01         [24]  909 	mov	(__divulonglong_PARM_2 + 1),(_freqcount + 1)
      0001C4 85*1B*02         [24]  910 	mov	(__divulonglong_PARM_2 + 2),(_freqcount + 2)
      0001C7 85*1C*03         [24]  911 	mov	(__divulonglong_PARM_2 + 3),(_freqcount + 3)
      0001CA 75*04 00         [24]  912 	mov	(__divulonglong_PARM_2 + 4),#0x00
      0001CD 75*05 00         [24]  913 	mov	(__divulonglong_PARM_2 + 5),#0x00
      0001D0 75*06 00         [24]  914 	mov	(__divulonglong_PARM_2 + 6),#0x00
      0001D3 75*07 00         [24]  915 	mov	(__divulonglong_PARM_2 + 7),#0x00
      0001D6 88 82            [24]  916 	mov	dpl,r0
      0001D8 89 83            [24]  917 	mov	dph,r1
      0001DA 8A F0            [24]  918 	mov	b,r2
      0001DC EB               [12]  919 	mov	a,r3
                                    920 ;	main.c:109: }
      0001DD 02r00r00         [24]  921 	ljmp	__divulonglong
                                    922 ;------------------------------------------------------------
                                    923 ;Allocation info for local variables in function 'reset'
                                    924 ;------------------------------------------------------------
                                    925 ;	main.c:110: void reset(){
                                    926 ;	-----------------------------------------
                                    927 ;	 function reset
                                    928 ;	-----------------------------------------
      0001E0                        929 _reset:
                                    930 ;	main.c:111: GATECTL=0;
                                    931 ;	assignBit
      0001E0 C2 B6            [12]  932 	clr	_P3_6
                                    933 ;	main.c:112: TR0=0;TR1=0;
                                    934 ;	assignBit
      0001E2 C2 8C            [12]  935 	clr	_TR0
                                    936 ;	assignBit
      0001E4 C2 8E            [12]  937 	clr	_TR1
                                    938 ;	main.c:113: inCnt.b0=P0;
      0001E6 85 80*0D         [24]  939 	mov	_inCnt,_P0
                                    940 ;	main.c:114: inCnt.b1=TL0;
      0001E9 85 8A*0E         [24]  941 	mov	(_inCnt + 0x0001),_TL0
                                    942 ;	main.c:115: inCnt.b2=TH0;
      0001EC 85 8C*0F         [24]  943 	mov	(_inCnt + 0x0002),_TH0
                                    944 ;	main.c:116: incount=inCnt.l;
      0001EF 85*0D*15         [24]  945 	mov	_incount,(_inCnt + 0)
      0001F2 85*0E*16         [24]  946 	mov	(_incount + 1),(_inCnt + 1)
      0001F5 85*0F*17         [24]  947 	mov	(_incount + 2),(_inCnt + 2)
      0001F8 85*10*18         [24]  948 	mov	(_incount + 3),(_inCnt + 3)
                                    949 ;	main.c:117: inCnt.b3=0;
      0001FB 75*10 00         [24]  950 	mov	(_inCnt + 0x0003),#0x00
                                    951 ;	main.c:118: freqCnt.b0=P2;
      0001FE 85 A0*11         [24]  952 	mov	_freqCnt,_P2
                                    953 ;	main.c:119: freqCnt.b1=TL1;
      000201 85 8B*12         [24]  954 	mov	(_freqCnt + 0x0001),_TL1
                                    955 ;	main.c:120: freqCnt.b2=TH1;
      000204 85 8D*13         [24]  956 	mov	(_freqCnt + 0x0002),_TH1
                                    957 ;	main.c:121: freqcount=freqCnt.l;
      000207 85*11*19         [24]  958 	mov	_freqcount,(_freqCnt + 0)
      00020A 85*12*1A         [24]  959 	mov	(_freqcount + 1),(_freqCnt + 1)
      00020D 85*13*1B         [24]  960 	mov	(_freqcount + 2),(_freqCnt + 2)
      000210 85*14*1C         [24]  961 	mov	(_freqcount + 3),(_freqCnt + 3)
                                    962 ;	main.c:122: freqCnt.b3=0;
      000213 75*14 00         [24]  963 	mov	(_freqCnt + 0x0003),#0x00
                                    964 ;	main.c:123: CLR=1;
                                    965 ;	assignBit
      000216 D2 B7            [12]  966 	setb	_P3_7
                                    967 ;	main.c:124: TH0=TL0=TH1=TL1=0;
      000218 75 8B 00         [24]  968 	mov	_TL1,#0x00
      00021B 75 8D 00         [24]  969 	mov	_TH1,#0x00
      00021E 75 8A 00         [24]  970 	mov	_TL0,#0x00
      000221 75 8C 00         [24]  971 	mov	_TH0,#0x00
                                    972 ;	main.c:125: overflow=false;
                                    973 ;	assignBit
      000224 C2*01            [12]  974 	clr	_overflow
                                    975 ;	main.c:126: CLR=0;
                                    976 ;	assignBit
      000226 C2 B7            [12]  977 	clr	_P3_7
                                    978 ;	main.c:127: TR0=1;TR1=1;
                                    979 ;	assignBit
      000228 D2 8C            [12]  980 	setb	_TR0
                                    981 ;	assignBit
      00022A D2 8E            [12]  982 	setb	_TR1
                                    983 ;	main.c:128: GATECTL=1;
                                    984 ;	assignBit
      00022C D2 B6            [12]  985 	setb	_P3_6
                                    986 ;	main.c:129: }
      00022E 22               [24]  987 	ret
                                    988 ;------------------------------------------------------------
                                    989 ;Allocation info for local variables in function 'readKey'
                                    990 ;------------------------------------------------------------
                                    991 ;keylong                   Allocated with name '_readKey_keylong_65536_23'
                                    992 ;gotkey                    Allocated with name '_readKey_gotkey_65536_23'
                                    993 ;k                         Allocated to registers r7 
                                    994 ;key                       Allocated to registers r6 
                                    995 ;------------------------------------------------------------
                                    996 ;	main.c:132: unsigned char readKey(){
                                    997 ;	-----------------------------------------
                                    998 ;	 function readKey
                                    999 ;	-----------------------------------------
      00022F                       1000 _readKey:
                                   1001 ;	main.c:135: unsigned char k=0,key=0;
      00022F 7F 00            [12] 1002 	mov	r7,#0x00
      000231 7E 00            [12] 1003 	mov	r6,#0x00
                                   1004 ;	main.c:137: if(!KEY)key=1;if(!KEY2)key=2;
      000233 20 90 02         [24] 1005 	jb	_P1_0,00102$
      000236 7E 01            [12] 1006 	mov	r6,#0x01
      000238                       1007 00102$:
      000238 20 91 02         [24] 1008 	jb	_P1_1,00104$
      00023B 7E 02            [12] 1009 	mov	r6,#0x02
      00023D                       1010 00104$:
                                   1011 ;	main.c:138: if(key!=0){
      00023D EE               [12] 1012 	mov	a,r6
      00023E 60 24            [24] 1013 	jz	00116$
                                   1014 ;	main.c:139: gotkey=key;
      000240 8E*23            [24] 1015 	mov	_readKey_gotkey_65536_23,r6
                                   1016 ;	main.c:140: if(keydly>0)keydly--;
      000242 E5*06            [12] 1017 	mov	a,_keydly
      000244 60 02            [24] 1018 	jz	00106$
      000246 15*06            [12] 1019 	dec	_keydly
      000248                       1020 00106$:
                                   1021 ;	main.c:141: if(keylong>0)keylong--;
      000248 E5*21            [12] 1022 	mov	a,_readKey_keylong_65536_23
      00024A 45*22            [12] 1023 	orl	a,(_readKey_keylong_65536_23 + 1)
      00024C 60 0B            [24] 1024 	jz	00110$
      00024E 15*21            [12] 1025 	dec	_readKey_keylong_65536_23
      000250 74 FF            [12] 1026 	mov	a,#0xff
      000252 B5*21 02         [24] 1027 	cjne	a,_readKey_keylong_65536_23,00157$
      000255 15*22            [12] 1028 	dec	(_readKey_keylong_65536_23 + 1)
      000257                       1029 00157$:
      000257 80 1F            [24] 1030 	sjmp	00117$
      000259                       1031 00110$:
                                   1032 ;	main.c:143: if(!longdown){
      000259 20*04 1C         [24] 1033 	jb	_readKey_longdown_65536_23,00117$
                                   1034 ;	main.c:144: longdown=true;
                                   1035 ;	assignBit
      00025C D2*04            [12] 1036 	setb	_readKey_longdown_65536_23
                                   1037 ;	main.c:145: k=key+2;
      00025E 74 02            [12] 1038 	mov	a,#0x02
      000260 2E               [12] 1039 	add	a,r6
      000261 FF               [12] 1040 	mov	r7,a
      000262 80 14            [24] 1041 	sjmp	00117$
      000264                       1042 00116$:
                                   1043 ;	main.c:149: if(keydly==0 && !longdown)k=gotkey;
      000264 E5*06            [12] 1044 	mov	a,_keydly
      000266 70 05            [24] 1045 	jnz	00113$
      000268 20*04 02         [24] 1046 	jb	_readKey_longdown_65536_23,00113$
      00026B AF*23            [24] 1047 	mov	r7,_readKey_gotkey_65536_23
      00026D                       1048 00113$:
                                   1049 ;	main.c:150: keydly=KEYDLY;
      00026D 75*06 32         [24] 1050 	mov	_keydly,#0x32
                                   1051 ;	main.c:151: keylong=KEYLONG;
      000270 75*21 F4         [24] 1052 	mov	_readKey_keylong_65536_23,#0xf4
      000273 75*22 01         [24] 1053 	mov	(_readKey_keylong_65536_23 + 1),#0x01
                                   1054 ;	main.c:152: longdown=false;
                                   1055 ;	assignBit
      000276 C2*04            [12] 1056 	clr	_readKey_longdown_65536_23
      000278                       1057 00117$:
                                   1058 ;	main.c:154: return k;
      000278 8F 82            [24] 1059 	mov	dpl,r7
                                   1060 ;	main.c:155: }
      00027A 22               [24] 1061 	ret
                                   1062 ;------------------------------------------------------------
                                   1063 ;Allocation info for local variables in function 'setmode'
                                   1064 ;------------------------------------------------------------
                                   1065 ;	main.c:157: void setmode(){
                                   1066 ;	-----------------------------------------
                                   1067 ;	 function setmode
                                   1068 ;	-----------------------------------------
      00027B                       1069 _setmode:
                                   1070 ;	main.c:158: switch(readKey()){
      00027B 12r02r2F         [24] 1071 	lcall	_readKey
      00027E AF 82            [24] 1072 	mov	r7,dpl
      000280 BF 01 02         [24] 1073 	cjne	r7,#0x01,00153$
      000283 80 10            [24] 1074 	sjmp	00101$
      000285                       1075 00153$:
      000285 BF 02 02         [24] 1076 	cjne	r7,#0x02,00154$
      000288 80 35            [24] 1077 	sjmp	00105$
      00028A                       1078 00154$:
      00028A BF 03 02         [24] 1079 	cjne	r7,#0x03,00155$
      00028D 80 59            [24] 1080 	sjmp	00110$
      00028F                       1081 00155$:
      00028F BF 04 02         [24] 1082 	cjne	r7,#0x04,00156$
      000292 80 54            [24] 1083 	sjmp	00110$
      000294                       1084 00156$:
      000294 22               [24] 1085 	ret
                                   1086 ;	main.c:159: case 1:  //+
      000295                       1087 00101$:
                                   1088 ;	main.c:160: switch(mode){
      000295 E4               [12] 1089 	clr	a
      000296 B5*24 02         [24] 1090 	cjne	a,_mode,00157$
      000299 80 08            [24] 1091 	sjmp	00102$
      00029B                       1092 00157$:
      00029B 74 01            [12] 1093 	mov	a,#0x01
      00029D B5*24 02         [24] 1094 	cjne	a,_mode,00158$
      0002A0 80 1A            [24] 1095 	sjmp	00103$
      0002A2                       1096 00158$:
      0002A2 22               [24] 1097 	ret
                                   1098 ;	main.c:161: case Freq:
      0002A3                       1099 00102$:
                                   1100 ;	main.c:162: speed=NORMAL;
      0002A3 75*05 64         [24] 1101 	mov	_speed,#0x64
                                   1102 ;	main.c:163: putstr(normal);
      0002A6 90r00r38         [24] 1103 	mov	dptr,#_normal
      0002A9 75 F0 80         [24] 1104 	mov	b,#0x80
      0002AC 12r00r74         [24] 1105 	lcall	_putstr
                                   1106 ;	main.c:164: reset();
      0002AF 12r01rE0         [24] 1107 	lcall	_reset
                                   1108 ;	main.c:165: gateDelay=16;
      0002B2 75*04 10         [24] 1109 	mov	_gateDelay,#0x10
                                   1110 ;	main.c:166: delay=1000;
      0002B5 75*07 E8         [24] 1111 	mov	_delay,#0xe8
      0002B8 75*08 03         [24] 1112 	mov	(_delay + 1),#0x03
                                   1113 ;	main.c:167: break;
                                   1114 ;	main.c:168: case Counter:
      0002BB 22               [24] 1115 	ret
      0002BC                       1116 00103$:
                                   1117 ;	main.c:169: GATECTL=!GATECTL;
      0002BC B2 B6            [12] 1118 	cpl	_P3_6
                                   1119 ;	main.c:172: break;
                                   1120 ;	main.c:173: case 2:  //-
      0002BE 22               [24] 1121 	ret
      0002BF                       1122 00105$:
                                   1123 ;	main.c:174: switch(mode){
      0002BF E4               [12] 1124 	clr	a
      0002C0 B5*24 02         [24] 1125 	cjne	a,_mode,00159$
      0002C3 80 07            [24] 1126 	sjmp	00106$
      0002C5                       1127 00159$:
      0002C5 74 01            [12] 1128 	mov	a,#0x01
                                   1129 ;	main.c:175: case Freq:
      0002C7 B5*24 45         [24] 1130 	cjne	a,_mode,00115$
      0002CA 80 19            [24] 1131 	sjmp	00107$
      0002CC                       1132 00106$:
                                   1133 ;	main.c:176: speed=FAST;
      0002CC 75*05 0A         [24] 1134 	mov	_speed,#0x0a
                                   1135 ;	main.c:177: putstr(fast);
      0002CF 90r00r30         [24] 1136 	mov	dptr,#_fast
      0002D2 75 F0 80         [24] 1137 	mov	b,#0x80
      0002D5 12r00r74         [24] 1138 	lcall	_putstr
                                   1139 ;	main.c:178: reset();
      0002D8 12r01rE0         [24] 1140 	lcall	_reset
                                   1141 ;	main.c:179: gateDelay=16;
      0002DB 75*04 10         [24] 1142 	mov	_gateDelay,#0x10
                                   1143 ;	main.c:180: delay=1000;
      0002DE 75*07 E8         [24] 1144 	mov	_delay,#0xe8
      0002E1 75*08 03         [24] 1145 	mov	(_delay + 1),#0x03
                                   1146 ;	main.c:181: break;
                                   1147 ;	main.c:182: case Counter:
      0002E4 22               [24] 1148 	ret
      0002E5                       1149 00107$:
                                   1150 ;	main.c:183: reset();
                                   1151 ;	main.c:186: break;
                                   1152 ;	main.c:188: case 4:
      0002E5 02r01rE0         [24] 1153 	ljmp	_reset
      0002E8                       1154 00110$:
                                   1155 ;	main.c:189: if(mode!=Freq){
      0002E8 E5*24            [12] 1156 	mov	a,_mode
      0002EA 60 0E            [24] 1157 	jz	00112$
                                   1158 ;	main.c:190: mode=Freq;
      0002EC 75*24 00         [24] 1159 	mov	_mode,#0x00
                                   1160 ;	main.c:191: putstr(freq);
      0002EF 90r00r28         [24] 1161 	mov	dptr,#_freq
      0002F2 75 F0 80         [24] 1162 	mov	b,#0x80
      0002F5 12r00r74         [24] 1163 	lcall	_putstr
      0002F8 80 0C            [24] 1164 	sjmp	00113$
      0002FA                       1165 00112$:
                                   1166 ;	main.c:193: mode=Counter;
      0002FA 75*24 01         [24] 1167 	mov	_mode,#0x01
                                   1168 ;	main.c:194: putstr(counter);
      0002FD 90r00r20         [24] 1169 	mov	dptr,#_counter
      000300 75 F0 80         [24] 1170 	mov	b,#0x80
      000303 12r00r74         [24] 1171 	lcall	_putstr
      000306                       1172 00113$:
                                   1173 ;	main.c:196: reset();
      000306 12r01rE0         [24] 1174 	lcall	_reset
                                   1175 ;	main.c:197: delay=1000;
      000309 75*07 E8         [24] 1176 	mov	_delay,#0xe8
      00030C 75*08 03         [24] 1177 	mov	(_delay + 1),#0x03
                                   1178 ;	main.c:199: }
      00030F                       1179 00115$:
                                   1180 ;	main.c:201: }
      00030F 22               [24] 1181 	ret
                                   1182 ;------------------------------------------------------------
                                   1183 ;Allocation info for local variables in function 'main'
                                   1184 ;------------------------------------------------------------
                                   1185 ;	main.c:204: void main(void){
                                   1186 ;	-----------------------------------------
                                   1187 ;	 function main
                                   1188 ;	-----------------------------------------
      000310                       1189 _main:
                                   1190 ;	main.c:206: PT0=1;PT1=1;
                                   1191 ;	assignBit
      000310 D2 B9            [12] 1192 	setb	_PT0
                                   1193 ;	assignBit
      000312 D2 BB            [12] 1194 	setb	_PT1
                                   1195 ;	main.c:207: PT2=1;
                                   1196 ;	assignBit
      000314 D2 BD            [12] 1197 	setb	_PT2
                                   1198 ;	main.c:208: SCON=0;
      000316 75 98 00         [24] 1199 	mov	_SCON,#0x00
                                   1200 ;	main.c:209: REN=0;
                                   1201 ;	assignBit
      000319 C2 9C            [12] 1202 	clr	_REN
                                   1203 ;	main.c:210: ES=1;
                                   1204 ;	assignBit
      00031B D2 AC            [12] 1205 	setb	_ES
                                   1206 ;	main.c:211: GATECTL=0;
                                   1207 ;	assignBit
      00031D C2 B6            [12] 1208 	clr	_P3_6
                                   1209 ;	main.c:212: CLR=1;
                                   1210 ;	assignBit
      00031F D2 B7            [12] 1211 	setb	_P3_7
                                   1212 ;	main.c:213: TMOD=0x55;
      000321 75 89 55         [24] 1213 	mov	_TMOD,#0x55
                                   1214 ;	main.c:214: TR0=0;TR1=0;ET0=1;ET1=1;
                                   1215 ;	assignBit
      000324 C2 8C            [12] 1216 	clr	_TR0
                                   1217 ;	assignBit
      000326 C2 8E            [12] 1218 	clr	_TR1
                                   1219 ;	assignBit
      000328 D2 A9            [12] 1220 	setb	_ET0
                                   1221 ;	assignBit
      00032A D2 AB            [12] 1222 	setb	_ET1
                                   1223 ;	main.c:215: TH0=0;
      00032C 75 8C 00         [24] 1224 	mov	_TH0,#0x00
                                   1225 ;	main.c:216: TL0=0;
      00032F 75 8A 00         [24] 1226 	mov	_TL0,#0x00
                                   1227 ;	main.c:217: TH1=0;
      000332 75 8D 00         [24] 1228 	mov	_TH1,#0x00
                                   1229 ;	main.c:218: TL1=0;
      000335 75 8B 00         [24] 1230 	mov	_TL1,#0x00
                                   1231 ;	main.c:219: RCAP2H=0xFD;   //10M  1/1000s
      000338 75 CB FD         [24] 1232 	mov	_RCAP2H,#0xfd
                                   1233 ;	main.c:220: RCAP2L=0xBE;
      00033B 75 CA BE         [24] 1234 	mov	_RCAP2L,#0xbe
                                   1235 ;	main.c:221: T2CON=0;
      00033E 75 C8 00         [24] 1236 	mov	_T2CON,#0x00
                                   1237 ;	main.c:222: T2MOD=0;
      000341 75 C9 00         [24] 1238 	mov	_T2MOD,#0x00
                                   1239 ;	main.c:223: TR2=1;
                                   1240 ;	assignBit
      000344 D2 CA            [12] 1241 	setb	_TR2
                                   1242 ;	main.c:224: ET2=1;
                                   1243 ;	assignBit
      000346 D2 AD            [12] 1244 	setb	_ET2
                                   1245 ;	main.c:225: EA=1;
                                   1246 ;	assignBit
      000348 D2 AF            [12] 1247 	setb	_EA
                                   1248 ;	main.c:226: putstr(cymomer);
      00034A 90r00r18         [24] 1249 	mov	dptr,#_cymomer
      00034D 75 F0 80         [24] 1250 	mov	b,#0x80
      000350 12r00r74         [24] 1251 	lcall	_putstr
                                   1252 ;	main.c:227: delay=1000;
      000353 75*07 E8         [24] 1253 	mov	_delay,#0xe8
      000356 75*08 03         [24] 1254 	mov	(_delay + 1),#0x03
                                   1255 ;	main.c:228: while(1){
      000359                       1256 00114$:
                                   1257 ;	main.c:229: PCON|=1;
      000359 43 87 01         [24] 1258 	orl	_PCON,#0x01
                                   1259 ;	main.c:230: setmode();
      00035C 12r02r7B         [24] 1260 	lcall	_setmode
                                   1261 ;	main.c:231: if(delay>0){delay--;continue;}
      00035F E5*07            [12] 1262 	mov	a,_delay
      000361 45*08            [12] 1263 	orl	a,(_delay + 1)
      000363 60 0B            [24] 1264 	jz	00102$
      000365 15*07            [12] 1265 	dec	_delay
      000367 74 FF            [12] 1266 	mov	a,#0xff
      000369 B5*07 02         [24] 1267 	cjne	a,_delay,00143$
      00036C 15*08            [12] 1268 	dec	(_delay + 1)
      00036E                       1269 00143$:
      00036E 80 E9            [24] 1270 	sjmp	00114$
      000370                       1271 00102$:
                                   1272 ;	main.c:232: switch(mode){
      000370 E4               [12] 1273 	clr	a
      000371 B5*24 02         [24] 1274 	cjne	a,_mode,00144$
      000374 80 07            [24] 1275 	sjmp	00103$
      000376                       1276 00144$:
      000376 74 01            [12] 1277 	mov	a,#0x01
                                   1278 ;	main.c:233: case Freq:
      000378 B5*24 DE         [24] 1279 	cjne	a,_mode,00114$
      00037B 80 28            [24] 1280 	sjmp	00111$
      00037D                       1281 00103$:
                                   1282 ;	main.c:234: if(!GATE&&!GATECTL||gateDelay==0){
      00037D 20 B3 03         [24] 1283 	jb	_P3_3,00110$
      000380 30 B6 04         [24] 1284 	jnb	_P3_6,00106$
      000383                       1285 00110$:
      000383 E5*04            [12] 1286 	mov	a,_gateDelay
      000385 70 15            [24] 1287 	jnz	00107$
      000387                       1288 00106$:
                                   1289 ;	main.c:235: gatelost=gateDelay==0;
      000387 E5*04            [12] 1290 	mov	a,_gateDelay
      000389 B4 01 00         [24] 1291 	cjne	a,#0x01,00149$
      00038C                       1292 00149$:
      00038C 92*02            [24] 1293 	mov	_gatelost,c
                                   1294 ;	main.c:236: reset();
      00038E 12r01rE0         [24] 1295 	lcall	_reset
                                   1296 ;	main.c:237: putlong(getFreq());
      000391 12r01r78         [24] 1297 	lcall	_getFreq
      000394 12r00r98         [24] 1298 	lcall	_putlong
                                   1299 ;	main.c:238: gateDelay=16;
      000397 75*04 10         [24] 1300 	mov	_gateDelay,#0x10
      00039A 80 BD            [24] 1301 	sjmp	00114$
      00039C                       1302 00107$:
                                   1303 ;	main.c:239: }else if(gateDelay==5){
      00039C 74 05            [12] 1304 	mov	a,#0x05
      00039E B5*04 B8         [24] 1305 	cjne	a,_gateDelay,00114$
                                   1306 ;	main.c:240: GATECTL=0;
                                   1307 ;	assignBit
      0003A1 C2 B6            [12] 1308 	clr	_P3_6
                                   1309 ;	main.c:242: break;
                                   1310 ;	main.c:243: case Counter:
      0003A3 80 B4            [24] 1311 	sjmp	00114$
      0003A5                       1312 00111$:
                                   1313 ;	main.c:244: putlong(getCount());
      0003A5 12r01r63         [24] 1314 	lcall	_getCount
      0003A8 12r00r98         [24] 1315 	lcall	_putlong
                                   1316 ;	main.c:245: delay=50;
      0003AB 75*07 32         [24] 1317 	mov	_delay,#0x32
      0003AE 75*08 00         [24] 1318 	mov	(_delay + 1),#0x00
                                   1319 ;	main.c:247: }
                                   1320 ;	main.c:250: }
      0003B1 80 A6            [24] 1321 	sjmp	00114$
                                   1322 	.area CSEG    (CODE)
                                   1323 	.area CONST   (CODE)
      000000                       1324 _LedSegs:
      000000 03                    1325 	.db #0x03	; 3
      000001 9F                    1326 	.db #0x9f	; 159
      000002 25                    1327 	.db #0x25	; 37
      000003 0D                    1328 	.db #0x0d	; 13
      000004 99                    1329 	.db #0x99	; 153
      000005 49                    1330 	.db #0x49	; 73	'I'
      000006 41                    1331 	.db #0x41	; 65	'A'
      000007 1F                    1332 	.db #0x1f	; 31
      000008 01                    1333 	.db #0x01	; 1
      000009 09                    1334 	.db #0x09	; 9
      00000A 11                    1335 	.db #0x11	; 17
      00000B C1                    1336 	.db #0xc1	; 193
      00000C 63                    1337 	.db #0x63	; 99	'c'
      00000D 85                    1338 	.db #0x85	; 133
      00000E 61                    1339 	.db #0x61	; 97	'a'
      00000F 71                    1340 	.db #0x71	; 113	'q'
      000010                       1341 _LedDigit:
      000010 01                    1342 	.db #0x01	; 1
      000011 02                    1343 	.db #0x02	; 2
      000012 04                    1344 	.db #0x04	; 4
      000013 08                    1345 	.db #0x08	; 8
      000014 10                    1346 	.db #0x10	; 16
      000015 20                    1347 	.db #0x20	; 32
      000016 40                    1348 	.db #0x40	; 64
      000017 80                    1349 	.db #0x80	; 128
      000018                       1350 _cymomer:
      000018 63                    1351 	.db #0x63	; 99	'c'
      000019 89                    1352 	.db #0x89	; 137
      00001A 55                    1353 	.db #0x55	; 85	'U'
      00001B C5                    1354 	.db #0xc5	; 197
      00001C 55                    1355 	.db #0x55	; 85	'U'
      00001D 21                    1356 	.db #0x21	; 33
      00001E F5                    1357 	.db #0xf5	; 245
      00001F FF                    1358 	.db #0xff	; 255
      000020                       1359 _counter:
      000020 63                    1360 	.db #0x63	; 99	'c'
      000021 C5                    1361 	.db #0xc5	; 197
      000022 C7                    1362 	.db #0xc7	; 199
      000023 D5                    1363 	.db #0xd5	; 213
      000024 E1                    1364 	.db #0xe1	; 225
      000025 21                    1365 	.db #0x21	; 33
      000026 F5                    1366 	.db #0xf5	; 245
      000027 FF                    1367 	.db #0xff	; 255
      000028                       1368 _freq:
      000028 71                    1369 	.db #0x71	; 113	'q'
      000029 F5                    1370 	.db #0xf5	; 245
      00002A 21                    1371 	.db #0x21	; 33
      00002B 19                    1372 	.db #0x19	; 25
      00002C FF                    1373 	.db #0xff	; 255
      00002D FF                    1374 	.db #0xff	; 255
      00002E FF                    1375 	.db #0xff	; 255
      00002F FF                    1376 	.db #0xff	; 255
      000030                       1377 _fast:
      000030 43                    1378 	.db #0x43	; 67	'C'
      000031 11                    1379 	.db #0x11	; 17
      000032 E1                    1380 	.db #0xe1	; 225
      000033 61                    1381 	.db #0x61	; 97	'a'
      000034 FF                    1382 	.db #0xff	; 255
      000035 02                    1383 	.db #0x02	; 2
      000036 9F                    1384 	.db #0x9f	; 159
      000037 4B                    1385 	.db #0x4b	; 75	'K'
      000038                       1386 _normal:
      000038 43                    1387 	.db #0x43	; 67	'C'
      000039 11                    1388 	.db #0x11	; 17
      00003A E1                    1389 	.db #0xe1	; 225
      00003B 61                    1390 	.db #0x61	; 97	'a'
      00003C FF                    1391 	.db #0xff	; 255
      00003D 9E                    1392 	.db #0x9e	; 158
      00003E 03                    1393 	.db #0x03	; 3
      00003F 4B                    1394 	.db #0x4b	; 75	'K'
                                   1395 	.area XINIT   (CODE)
                                   1396 	.area CABS    (ABS,CODE)
