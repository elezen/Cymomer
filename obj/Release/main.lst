                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _finetune
                                     12 	.globl _normal
                                     13 	.globl _fast
                                     14 	.globl _freq
                                     15 	.globl _counter
                                     16 	.globl _cymomer
                                     17 	.globl _LedDigit
                                     18 	.globl _LedSegs
                                     19 	.globl _main
                                     20 	.globl _setmode
                                     21 	.globl _readKey
                                     22 	.globl _reset
                                     23 	.globl _getFreq
                                     24 	.globl _getCount
                                     25 	.globl _putlong
                                     26 	.globl _putstr
                                     27 	.globl _timer2
                                     28 	.globl _serialPort
                                     29 	.globl _counter1
                                     30 	.globl _counter0
                                     31 	.globl _CY
                                     32 	.globl _AC
                                     33 	.globl _F0
                                     34 	.globl _RS1
                                     35 	.globl _RS0
                                     36 	.globl _OV
                                     37 	.globl _FL
                                     38 	.globl _P
                                     39 	.globl _TF2
                                     40 	.globl _EXF2
                                     41 	.globl _RCLK
                                     42 	.globl _TCLK
                                     43 	.globl _EXEN2
                                     44 	.globl _TR2
                                     45 	.globl _C_T2
                                     46 	.globl _CP_RL2
                                     47 	.globl _T2CON_7
                                     48 	.globl _T2CON_6
                                     49 	.globl _T2CON_5
                                     50 	.globl _T2CON_4
                                     51 	.globl _T2CON_3
                                     52 	.globl _T2CON_2
                                     53 	.globl _T2CON_1
                                     54 	.globl _T2CON_0
                                     55 	.globl _PT2
                                     56 	.globl _PS
                                     57 	.globl _PT1
                                     58 	.globl _PX1
                                     59 	.globl _PT0
                                     60 	.globl _PX0
                                     61 	.globl _RD
                                     62 	.globl _WR
                                     63 	.globl _T1
                                     64 	.globl _T0
                                     65 	.globl _INT1
                                     66 	.globl _INT0
                                     67 	.globl _TXD
                                     68 	.globl _RXD
                                     69 	.globl _P3_7
                                     70 	.globl _P3_6
                                     71 	.globl _P3_5
                                     72 	.globl _P3_4
                                     73 	.globl _P3_3
                                     74 	.globl _P3_2
                                     75 	.globl _P3_1
                                     76 	.globl _P3_0
                                     77 	.globl _EA
                                     78 	.globl _ET2
                                     79 	.globl _ES
                                     80 	.globl _ET1
                                     81 	.globl _EX1
                                     82 	.globl _ET0
                                     83 	.globl _EX0
                                     84 	.globl _P2_7
                                     85 	.globl _P2_6
                                     86 	.globl _P2_5
                                     87 	.globl _P2_4
                                     88 	.globl _P2_3
                                     89 	.globl _P2_2
                                     90 	.globl _P2_1
                                     91 	.globl _P2_0
                                     92 	.globl _SM0
                                     93 	.globl _SM1
                                     94 	.globl _SM2
                                     95 	.globl _REN
                                     96 	.globl _TB8
                                     97 	.globl _RB8
                                     98 	.globl _TI
                                     99 	.globl _RI
                                    100 	.globl _T2EX
                                    101 	.globl _T2
                                    102 	.globl _P1_7
                                    103 	.globl _P1_6
                                    104 	.globl _P1_5
                                    105 	.globl _P1_4
                                    106 	.globl _P1_3
                                    107 	.globl _P1_2
                                    108 	.globl _P1_1
                                    109 	.globl _P1_0
                                    110 	.globl _TF1
                                    111 	.globl _TR1
                                    112 	.globl _TF0
                                    113 	.globl _TR0
                                    114 	.globl _IE1
                                    115 	.globl _IT1
                                    116 	.globl _IE0
                                    117 	.globl _IT0
                                    118 	.globl _P0_7
                                    119 	.globl _P0_6
                                    120 	.globl _P0_5
                                    121 	.globl _P0_4
                                    122 	.globl _P0_3
                                    123 	.globl _P0_2
                                    124 	.globl _P0_1
                                    125 	.globl _P0_0
                                    126 	.globl _B
                                    127 	.globl _A
                                    128 	.globl _ACC
                                    129 	.globl _PSW
                                    130 	.globl _TH2
                                    131 	.globl _TL2
                                    132 	.globl _RCAP2H
                                    133 	.globl _RCAP2L
                                    134 	.globl _T2MOD
                                    135 	.globl _T2CON
                                    136 	.globl _IP
                                    137 	.globl _P3
                                    138 	.globl _IE
                                    139 	.globl _P2
                                    140 	.globl _SBUF
                                    141 	.globl _SCON
                                    142 	.globl _P1
                                    143 	.globl _TH1
                                    144 	.globl _TH0
                                    145 	.globl _TL1
                                    146 	.globl _TL0
                                    147 	.globl _TMOD
                                    148 	.globl _TCON
                                    149 	.globl _PCON
                                    150 	.globl _DPH
                                    151 	.globl _DPL
                                    152 	.globl _SP
                                    153 	.globl _P0
                                    154 	.globl _longdown
                                    155 	.globl _gatelost
                                    156 	.globl _overflow
                                    157 	.globl _ledReady
                                    158 	.globl _leds
                                    159 	.globl _mode
                                    160 	.globl _freqcount
                                    161 	.globl _incount
                                    162 	.globl _freqCnt
                                    163 	.globl _inCnt
                                    164 	.globl _mainFreq
                                    165 	.globl _delay
                                    166 	.globl _keydly
                                    167 	.globl _speed
                                    168 	.globl _gateDelay
                                    169 	.globl _msTick
                                    170 	.globl _led_d
                                    171 	.globl _led_i
                                    172 ;--------------------------------------------------------
                                    173 ; special function registers
                                    174 ;--------------------------------------------------------
                                    175 	.area RSEG    (ABS,DATA)
      000000                        176 	.org 0x0000
                           000080   177 _P0	=	0x0080
                           000081   178 _SP	=	0x0081
                           000082   179 _DPL	=	0x0082
                           000083   180 _DPH	=	0x0083
                           000087   181 _PCON	=	0x0087
                           000088   182 _TCON	=	0x0088
                           000089   183 _TMOD	=	0x0089
                           00008A   184 _TL0	=	0x008a
                           00008B   185 _TL1	=	0x008b
                           00008C   186 _TH0	=	0x008c
                           00008D   187 _TH1	=	0x008d
                           000090   188 _P1	=	0x0090
                           000098   189 _SCON	=	0x0098
                           000099   190 _SBUF	=	0x0099
                           0000A0   191 _P2	=	0x00a0
                           0000A8   192 _IE	=	0x00a8
                           0000B0   193 _P3	=	0x00b0
                           0000B8   194 _IP	=	0x00b8
                           0000C8   195 _T2CON	=	0x00c8
                           0000C9   196 _T2MOD	=	0x00c9
                           0000CA   197 _RCAP2L	=	0x00ca
                           0000CB   198 _RCAP2H	=	0x00cb
                           0000CC   199 _TL2	=	0x00cc
                           0000CD   200 _TH2	=	0x00cd
                           0000D0   201 _PSW	=	0x00d0
                           0000E0   202 _ACC	=	0x00e0
                           0000E0   203 _A	=	0x00e0
                           0000F0   204 _B	=	0x00f0
                                    205 ;--------------------------------------------------------
                                    206 ; special function bits
                                    207 ;--------------------------------------------------------
                                    208 	.area RSEG    (ABS,DATA)
      000000                        209 	.org 0x0000
                           000080   210 _P0_0	=	0x0080
                           000081   211 _P0_1	=	0x0081
                           000082   212 _P0_2	=	0x0082
                           000083   213 _P0_3	=	0x0083
                           000084   214 _P0_4	=	0x0084
                           000085   215 _P0_5	=	0x0085
                           000086   216 _P0_6	=	0x0086
                           000087   217 _P0_7	=	0x0087
                           000088   218 _IT0	=	0x0088
                           000089   219 _IE0	=	0x0089
                           00008A   220 _IT1	=	0x008a
                           00008B   221 _IE1	=	0x008b
                           00008C   222 _TR0	=	0x008c
                           00008D   223 _TF0	=	0x008d
                           00008E   224 _TR1	=	0x008e
                           00008F   225 _TF1	=	0x008f
                           000090   226 _P1_0	=	0x0090
                           000091   227 _P1_1	=	0x0091
                           000092   228 _P1_2	=	0x0092
                           000093   229 _P1_3	=	0x0093
                           000094   230 _P1_4	=	0x0094
                           000095   231 _P1_5	=	0x0095
                           000096   232 _P1_6	=	0x0096
                           000097   233 _P1_7	=	0x0097
                           000090   234 _T2	=	0x0090
                           000091   235 _T2EX	=	0x0091
                           000098   236 _RI	=	0x0098
                           000099   237 _TI	=	0x0099
                           00009A   238 _RB8	=	0x009a
                           00009B   239 _TB8	=	0x009b
                           00009C   240 _REN	=	0x009c
                           00009D   241 _SM2	=	0x009d
                           00009E   242 _SM1	=	0x009e
                           00009F   243 _SM0	=	0x009f
                           0000A0   244 _P2_0	=	0x00a0
                           0000A1   245 _P2_1	=	0x00a1
                           0000A2   246 _P2_2	=	0x00a2
                           0000A3   247 _P2_3	=	0x00a3
                           0000A4   248 _P2_4	=	0x00a4
                           0000A5   249 _P2_5	=	0x00a5
                           0000A6   250 _P2_6	=	0x00a6
                           0000A7   251 _P2_7	=	0x00a7
                           0000A8   252 _EX0	=	0x00a8
                           0000A9   253 _ET0	=	0x00a9
                           0000AA   254 _EX1	=	0x00aa
                           0000AB   255 _ET1	=	0x00ab
                           0000AC   256 _ES	=	0x00ac
                           0000AD   257 _ET2	=	0x00ad
                           0000AF   258 _EA	=	0x00af
                           0000B0   259 _P3_0	=	0x00b0
                           0000B1   260 _P3_1	=	0x00b1
                           0000B2   261 _P3_2	=	0x00b2
                           0000B3   262 _P3_3	=	0x00b3
                           0000B4   263 _P3_4	=	0x00b4
                           0000B5   264 _P3_5	=	0x00b5
                           0000B6   265 _P3_6	=	0x00b6
                           0000B7   266 _P3_7	=	0x00b7
                           0000B0   267 _RXD	=	0x00b0
                           0000B1   268 _TXD	=	0x00b1
                           0000B2   269 _INT0	=	0x00b2
                           0000B3   270 _INT1	=	0x00b3
                           0000B4   271 _T0	=	0x00b4
                           0000B5   272 _T1	=	0x00b5
                           0000B6   273 _WR	=	0x00b6
                           0000B7   274 _RD	=	0x00b7
                           0000B8   275 _PX0	=	0x00b8
                           0000B9   276 _PT0	=	0x00b9
                           0000BA   277 _PX1	=	0x00ba
                           0000BB   278 _PT1	=	0x00bb
                           0000BC   279 _PS	=	0x00bc
                           0000BD   280 _PT2	=	0x00bd
                           0000C8   281 _T2CON_0	=	0x00c8
                           0000C9   282 _T2CON_1	=	0x00c9
                           0000CA   283 _T2CON_2	=	0x00ca
                           0000CB   284 _T2CON_3	=	0x00cb
                           0000CC   285 _T2CON_4	=	0x00cc
                           0000CD   286 _T2CON_5	=	0x00cd
                           0000CE   287 _T2CON_6	=	0x00ce
                           0000CF   288 _T2CON_7	=	0x00cf
                           0000C8   289 _CP_RL2	=	0x00c8
                           0000C9   290 _C_T2	=	0x00c9
                           0000CA   291 _TR2	=	0x00ca
                           0000CB   292 _EXEN2	=	0x00cb
                           0000CC   293 _TCLK	=	0x00cc
                           0000CD   294 _RCLK	=	0x00cd
                           0000CE   295 _EXF2	=	0x00ce
                           0000CF   296 _TF2	=	0x00cf
                           0000D0   297 _P	=	0x00d0
                           0000D1   298 _FL	=	0x00d1
                           0000D2   299 _OV	=	0x00d2
                           0000D3   300 _RS0	=	0x00d3
                           0000D4   301 _RS1	=	0x00d4
                           0000D5   302 _F0	=	0x00d5
                           0000D6   303 _AC	=	0x00d6
                           0000D7   304 _CY	=	0x00d7
                                    305 ;--------------------------------------------------------
                                    306 ; overlayable register banks
                                    307 ;--------------------------------------------------------
                                    308 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        309 	.ds 8
                                    310 ;--------------------------------------------------------
                                    311 ; internal ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area DSEG    (DATA)
      000000                        314 _led_i::
      000000                        315 	.ds 1
      000001                        316 _led_d::
      000001                        317 	.ds 1
      000002                        318 _msTick::
      000002                        319 	.ds 1
      000003                        320 _gateDelay::
      000003                        321 	.ds 1
      000004                        322 _speed::
      000004                        323 	.ds 1
      000005                        324 _keydly::
      000005                        325 	.ds 1
      000006                        326 _delay::
      000006                        327 	.ds 2
      000008                        328 _mainFreq::
      000008                        329 	.ds 4
      00000C                        330 _inCnt::
      00000C                        331 	.ds 4
      000010                        332 _freqCnt::
      000010                        333 	.ds 4
      000014                        334 _incount::
      000014                        335 	.ds 4
      000018                        336 _freqcount::
      000018                        337 	.ds 4
      00001C                        338 _putlong_a_65536_13:
      00001C                        339 	.ds 4
      000020                        340 _readKey_keylong_65536_25:
      000020                        341 	.ds 2
      000022                        342 _readKey_gotkey_65536_25:
      000022                        343 	.ds 1
      000023                        344 _mode::
      000023                        345 	.ds 1
                                    346 ;--------------------------------------------------------
                                    347 ; overlayable items in internal ram 
                                    348 ;--------------------------------------------------------
                                    349 	.area	OSEG    (OVR,DATA)
                                    350 	.area	OSEG    (OVR,DATA)
                                    351 ;--------------------------------------------------------
                                    352 ; Stack segment in internal ram 
                                    353 ;--------------------------------------------------------
                                    354 	.area	SSEG
      000000                        355 __start__stack:
      000000                        356 	.ds	1
                                    357 
                                    358 ;--------------------------------------------------------
                                    359 ; indirectly addressable internal ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area ISEG    (DATA)
      000000                        362 _leds::
      000000                        363 	.ds 8
      000008                        364 _putlong_buf_65536_14:
      000008                        365 	.ds 8
                                    366 ;--------------------------------------------------------
                                    367 ; absolute internal ram data
                                    368 ;--------------------------------------------------------
                                    369 	.area IABS    (ABS,DATA)
                                    370 	.area IABS    (ABS,DATA)
                                    371 ;--------------------------------------------------------
                                    372 ; bit data
                                    373 ;--------------------------------------------------------
                                    374 	.area BSEG    (BIT)
      000000                        375 _ledReady::
      000000                        376 	.ds 1
      000001                        377 _overflow::
      000001                        378 	.ds 1
      000002                        379 _gatelost::
      000002                        380 	.ds 1
      000003                        381 _longdown::
      000003                        382 	.ds 1
      000004                        383 _readKey_longdown_65536_25:
      000004                        384 	.ds 1
                                    385 ;--------------------------------------------------------
                                    386 ; paged external ram data
                                    387 ;--------------------------------------------------------
                                    388 	.area PSEG    (PAG,XDATA)
                                    389 ;--------------------------------------------------------
                                    390 ; external ram data
                                    391 ;--------------------------------------------------------
                                    392 	.area XSEG    (XDATA)
                                    393 ;--------------------------------------------------------
                                    394 ; absolute external ram data
                                    395 ;--------------------------------------------------------
                                    396 	.area XABS    (ABS,XDATA)
                                    397 ;--------------------------------------------------------
                                    398 ; external initialized ram data
                                    399 ;--------------------------------------------------------
                                    400 	.area XISEG   (XDATA)
                                    401 	.area HOME    (CODE)
                                    402 	.area GSINIT0 (CODE)
                                    403 	.area GSINIT1 (CODE)
                                    404 	.area GSINIT2 (CODE)
                                    405 	.area GSINIT3 (CODE)
                                    406 	.area GSINIT4 (CODE)
                                    407 	.area GSINIT5 (CODE)
                                    408 	.area GSINIT  (CODE)
                                    409 	.area GSFINAL (CODE)
                                    410 	.area CSEG    (CODE)
                                    411 ;--------------------------------------------------------
                                    412 ; interrupt vector 
                                    413 ;--------------------------------------------------------
                                    414 	.area HOME    (CODE)
      000000                        415 __interrupt_vect:
      000000 02r00r00         [24]  416 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  417 	reti
      000004                        418 	.ds	7
      00000B 02r00r00         [24]  419 	ljmp	_counter0
      00000E                        420 	.ds	5
      000013 32               [24]  421 	reti
      000014                        422 	.ds	7
      00001B 02r00r0A         [24]  423 	ljmp	_counter1
      00001E                        424 	.ds	5
      000023 02r00r14         [24]  425 	ljmp	_serialPort
      000026                        426 	.ds	5
      00002B 02r00r40         [24]  427 	ljmp	_timer2
                                    428 ;--------------------------------------------------------
                                    429 ; global & static initialisations
                                    430 ;--------------------------------------------------------
                                    431 	.area HOME    (CODE)
                                    432 	.area GSINIT  (CODE)
                                    433 	.area GSFINAL (CODE)
                                    434 	.area GSINIT  (CODE)
                                    435 	.globl __sdcc_gsinit_startup
                                    436 	.globl __sdcc_program_startup
                                    437 	.globl __start__stack
                                    438 	.globl __mcs51_genXINIT
                                    439 	.globl __mcs51_genXRAMCLEAR
                                    440 	.globl __mcs51_genRAMCLEAR
                                    441 ;------------------------------------------------------------
                                    442 ;Allocation info for local variables in function 'readKey'
                                    443 ;------------------------------------------------------------
                                    444 ;keylong                   Allocated with name '_readKey_keylong_65536_25'
                                    445 ;gotkey                    Allocated with name '_readKey_gotkey_65536_25'
                                    446 ;k                         Allocated to registers r7 
                                    447 ;key                       Allocated to registers r6 
                                    448 ;------------------------------------------------------------
                                    449 ;	main.c:138: static __bit longdown=false;
                                    450 ;	assignBit
      000000 C2*04            [12]  451 	clr	_readKey_longdown_65536_25
                                    452 ;	main.c:139: static unsigned int keylong=KEYLONG;
      000002 75*20 F4         [24]  453 	mov	_readKey_keylong_65536_25,#0xf4
      000005 75*21 01         [24]  454 	mov	(_readKey_keylong_65536_25 + 1),#0x01
                                    455 ;	main.c:141: static unsigned char gotkey=0;
      000008 75*22 00         [24]  456 	mov	_readKey_gotkey_65536_25,#0x00
                                    457 ;	main.c:21: char led_i=0;
      00000B 75*00 00         [24]  458 	mov	_led_i,#0x00
                                    459 ;	main.c:24: unsigned char msTick=0,gateDelay=0,speed=NORMAL,keydly=KEYDLY;
      00000E 75*02 00         [24]  460 	mov	_msTick,#0x00
                                    461 ;	main.c:24: unsigned int delay=0;
      000011 75*03 00         [24]  462 	mov	_gateDelay,#0x00
                                    463 ;	main.c:24: unsigned char msTick=0,gateDelay=0,speed=NORMAL,keydly=KEYDLY;
      000014 75*04 64         [24]  464 	mov	_speed,#0x64
                                    465 ;	main.c:24: unsigned int delay=0;
      000017 75*05 32         [24]  466 	mov	_keydly,#0x32
                                    467 ;	main.c:25: unsigned long mainFreq=FREQ;
      00001A E4               [12]  468 	clr	a
      00001B F5*06            [12]  469 	mov	_delay,a
      00001D F5*07            [12]  470 	mov	(_delay + 1),a
                                    471 ;	main.c:26: __code char cymomer[]  = {0x63,0x89,0x55,0xc5,0x55,0x21,0xf5,0xff};
      00001F 75*08 80         [24]  472 	mov	_mainFreq,#0x80
      000022 75*09 96         [24]  473 	mov	(_mainFreq + 1),#0x96
      000025 75*0A 98         [24]  474 	mov	(_mainFreq + 2),#0x98
                                    475 ;	1-genFromRTrack replaced	mov	(_mainFreq + 3),#0x00
      000028 F5*0B            [12]  476 	mov	(_mainFreq + 3),a
                                    477 ;	main.c:161: enum{Freq,Counter,Tune} mode=Freq;
                                    478 ;	1-genFromRTrack replaced	mov	_mode,#0x00
      00002A F5*23            [12]  479 	mov	_mode,a
                                    480 ;	main.c:22: __bit ledReady,overflow=false,gatelost=false;
                                    481 ;	assignBit
      00002C C2*01            [12]  482 	clr	_overflow
                                    483 ;	main.c:22: char led_d;
                                    484 ;	assignBit
      00002E C2*02            [12]  485 	clr	_gatelost
                                    486 ;	main.c:135: __bit longdown=false;
                                    487 ;	assignBit
      000030 C2*03            [12]  488 	clr	_longdown
                                    489 	.area GSFINAL (CODE)
      000000 02r00r2E         [24]  490 	ljmp	__sdcc_program_startup
                                    491 ;--------------------------------------------------------
                                    492 ; Home
                                    493 ;--------------------------------------------------------
                                    494 	.area HOME    (CODE)
                                    495 	.area HOME    (CODE)
      00002E                        496 __sdcc_program_startup:
      00002E 02r04r0F         [24]  497 	ljmp	_main
                                    498 ;	return from main will return to caller
                                    499 ;--------------------------------------------------------
                                    500 ; code
                                    501 ;--------------------------------------------------------
                                    502 	.area CSEG    (CODE)
                                    503 ;------------------------------------------------------------
                                    504 ;Allocation info for local variables in function 'counter0'
                                    505 ;------------------------------------------------------------
                                    506 ;	main.c:41: void counter0() __interrupt 1{
                                    507 ;	-----------------------------------------
                                    508 ;	 function counter0
                                    509 ;	-----------------------------------------
      000000                        510 _counter0:
                           000007   511 	ar7 = 0x07
                           000006   512 	ar6 = 0x06
                           000005   513 	ar5 = 0x05
                           000004   514 	ar4 = 0x04
                           000003   515 	ar3 = 0x03
                           000002   516 	ar2 = 0x02
                           000001   517 	ar1 = 0x01
                           000000   518 	ar0 = 0x00
      000000 C0 E0            [24]  519 	push	acc
                                    520 ;	main.c:42: ++inCnt.b3;
      000002 E5*0F            [12]  521 	mov	a,(_inCnt + 0x0003)
      000004 04               [12]  522 	inc	a
      000005 F5*0F            [12]  523 	mov	(_inCnt + 0x0003),a
                                    524 ;	main.c:43: }
      000007 D0 E0            [24]  525 	pop	acc
      000009 32               [24]  526 	reti
                                    527 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    528 ;	eliminated unneeded push/pop ar1
                                    529 ;	eliminated unneeded push/pop ar0
                                    530 ;	eliminated unneeded push/pop psw
                                    531 ;	eliminated unneeded push/pop dpl
                                    532 ;	eliminated unneeded push/pop dph
                                    533 ;	eliminated unneeded push/pop b
                                    534 ;------------------------------------------------------------
                                    535 ;Allocation info for local variables in function 'counter1'
                                    536 ;------------------------------------------------------------
                                    537 ;	main.c:44: void counter1() __interrupt 3{
                                    538 ;	-----------------------------------------
                                    539 ;	 function counter1
                                    540 ;	-----------------------------------------
      00000A                        541 _counter1:
      00000A C0 E0            [24]  542 	push	acc
                                    543 ;	main.c:45: ++freqCnt.b3;
      00000C E5*13            [12]  544 	mov	a,(_freqCnt + 0x0003)
      00000E 04               [12]  545 	inc	a
      00000F F5*13            [12]  546 	mov	(_freqCnt + 0x0003),a
                                    547 ;	main.c:46: }
      000011 D0 E0            [24]  548 	pop	acc
      000013 32               [24]  549 	reti
                                    550 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    551 ;	eliminated unneeded push/pop ar1
                                    552 ;	eliminated unneeded push/pop ar0
                                    553 ;	eliminated unneeded push/pop psw
                                    554 ;	eliminated unneeded push/pop dpl
                                    555 ;	eliminated unneeded push/pop dph
                                    556 ;	eliminated unneeded push/pop b
                                    557 ;------------------------------------------------------------
                                    558 ;Allocation info for local variables in function 'serialPort'
                                    559 ;------------------------------------------------------------
                                    560 ;	main.c:47: void serialPort() __interrupt 4{
                                    561 ;	-----------------------------------------
                                    562 ;	 function serialPort
                                    563 ;	-----------------------------------------
      000014                        564 _serialPort:
      000014 C0 E0            [24]  565 	push	acc
      000016 C0 01            [24]  566 	push	ar1
      000018 C0 D0            [24]  567 	push	psw
      00001A 75 D0 00         [24]  568 	mov	psw,#0x00
                                    569 ;	main.c:48: if(RI)RI=0;
                                    570 ;	assignBit
      00001D 10 98 02         [24]  571 	jbc	_RI,00122$
      000020 80 00            [24]  572 	sjmp	00102$
      000022                        573 00122$:
      000022                        574 00102$:
                                    575 ;	main.c:49: if(TI){
                                    576 ;	main.c:50: TI=0;
                                    577 ;	assignBit
      000022 10 99 02         [24]  578 	jbc	_TI,00123$
      000025 80 12            [24]  579 	sjmp	00108$
      000027                        580 00123$:
                                    581 ;	main.c:51: if(!ledReady){
      000027 20*00 0D         [24]  582 	jb	_ledReady,00104$
                                    583 ;	main.c:52: SBUF=leds[led_i];
      00002A E5*00            [12]  584 	mov	a,_led_i
      00002C 24r00            [12]  585 	add	a,#_leds
      00002E F9               [12]  586 	mov	r1,a
      00002F 87 99            [24]  587 	mov	_SBUF,@r1
                                    588 ;	main.c:53: P3_2=0;
                                    589 ;	assignBit
      000031 C2 B2            [12]  590 	clr	_P3_2
                                    591 ;	main.c:54: ledReady=1;
                                    592 ;	assignBit
      000033 D2*00            [12]  593 	setb	_ledReady
      000035 80 02            [24]  594 	sjmp	00108$
      000037                        595 00104$:
                                    596 ;	main.c:56: P3_2=1;
                                    597 ;	assignBit
      000037 D2 B2            [12]  598 	setb	_P3_2
      000039                        599 00108$:
                                    600 ;	main.c:59: }
      000039 D0 D0            [24]  601 	pop	psw
      00003B D0 01            [24]  602 	pop	ar1
      00003D D0 E0            [24]  603 	pop	acc
      00003F 32               [24]  604 	reti
                                    605 ;	eliminated unneeded push/pop ar0
                                    606 ;	eliminated unneeded push/pop dpl
                                    607 ;	eliminated unneeded push/pop dph
                                    608 ;	eliminated unneeded push/pop b
                                    609 ;------------------------------------------------------------
                                    610 ;Allocation info for local variables in function 'timer2'
                                    611 ;------------------------------------------------------------
                                    612 ;	main.c:60: void timer2(void) __interrupt 5{
                                    613 ;	-----------------------------------------
                                    614 ;	 function timer2
                                    615 ;	-----------------------------------------
      000040                        616 _timer2:
      000040 C0 E0            [24]  617 	push	acc
      000042 C0 82            [24]  618 	push	dpl
      000044 C0 83            [24]  619 	push	dph
      000046 C0 D0            [24]  620 	push	psw
                                    621 ;	main.c:61: TF2=0;
                                    622 ;	assignBit
      000048 C2 CF            [12]  623 	clr	_TF2
                                    624 ;	main.c:62: ledReady=0;
                                    625 ;	assignBit
      00004A C2*00            [12]  626 	clr	_ledReady
                                    627 ;	main.c:63: if(++led_i>7)led_i=0;
      00004C 05*00            [12]  628 	inc	_led_i
      00004E E5*00            [12]  629 	mov	a,_led_i
      000050 24 F8            [12]  630 	add	a,#0xff - 0x07
      000052 50 03            [24]  631 	jnc	00102$
      000054 75*00 00         [24]  632 	mov	_led_i,#0x00
      000057                        633 00102$:
                                    634 ;	main.c:64: SBUF=LedDigit[led_i];
      000057 E5*00            [12]  635 	mov	a,_led_i
      000059 90r00r10         [24]  636 	mov	dptr,#_LedDigit
      00005C 93               [24]  637 	movc	a,@a+dptr
      00005D F5 99            [12]  638 	mov	_SBUF,a
                                    639 ;	main.c:65: if(--msTick==0){
      00005F D5*02 09         [24]  640 	djnz	_msTick,00107$
                                    641 ;	main.c:66: msTick=speed;
      000062 85*04*02         [24]  642 	mov	_msTick,_speed
                                    643 ;	main.c:67: if(gateDelay>0)gateDelay--;
      000065 E5*03            [12]  644 	mov	a,_gateDelay
      000067 60 02            [24]  645 	jz	00107$
      000069 15*03            [12]  646 	dec	_gateDelay
      00006B                        647 00107$:
                                    648 ;	main.c:69: }
      00006B D0 D0            [24]  649 	pop	psw
      00006D D0 83            [24]  650 	pop	dph
      00006F D0 82            [24]  651 	pop	dpl
      000071 D0 E0            [24]  652 	pop	acc
      000073 32               [24]  653 	reti
                                    654 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    655 ;	eliminated unneeded push/pop b
                                    656 ;------------------------------------------------------------
                                    657 ;Allocation info for local variables in function 'putstr'
                                    658 ;------------------------------------------------------------
                                    659 ;s                         Allocated to registers 
                                    660 ;i                         Allocated to registers r5 
                                    661 ;------------------------------------------------------------
                                    662 ;	main.c:73: void putstr(__code char *s){
                                    663 ;	-----------------------------------------
                                    664 ;	 function putstr
                                    665 ;	-----------------------------------------
      000074                        666 _putstr:
      000074 AE 82            [24]  667 	mov	r6,dpl
      000076 AF 83            [24]  668 	mov	r7,dph
                                    669 ;	main.c:75: do{
      000078 7D 07            [12]  670 	mov	r5,#0x07
      00007A                        671 00101$:
                                    672 ;	main.c:76: leds[i]=*s;
      00007A ED               [12]  673 	mov	a,r5
      00007B 24r00            [12]  674 	add	a,#_leds
      00007D F9               [12]  675 	mov	r1,a
      00007E 8E 82            [24]  676 	mov	dpl,r6
      000080 8F 83            [24]  677 	mov	dph,r7
      000082 E4               [12]  678 	clr	a
      000083 93               [24]  679 	movc	a,@a+dptr
      000084 FC               [12]  680 	mov	r4,a
      000085 A3               [24]  681 	inc	dptr
      000086 AE 82            [24]  682 	mov	r6,dpl
      000088 AF 83            [24]  683 	mov	r7,dph
      00008A A7 04            [24]  684 	mov	@r1,ar4
                                    685 ;	main.c:77: s++;
                                    686 ;	main.c:78: }while(i--);
      00008C 8D 04            [24]  687 	mov	ar4,r5
      00008E 1D               [12]  688 	dec	r5
      00008F EC               [12]  689 	mov	a,r4
      000090 70 E8            [24]  690 	jnz	00101$
                                    691 ;	main.c:79: }
      000092 22               [24]  692 	ret
                                    693 ;------------------------------------------------------------
                                    694 ;Allocation info for local variables in function 'putlong'
                                    695 ;------------------------------------------------------------
                                    696 ;a                         Allocated with name '_putlong_a_65536_13'
                                    697 ;i                         Allocated to registers r3 
                                    698 ;c                         Allocated to registers r7 
                                    699 ;buf                       Allocated with name '_putlong_buf_65536_14'
                                    700 ;------------------------------------------------------------
                                    701 ;	main.c:81: void putlong(unsigned long a){
                                    702 ;	-----------------------------------------
                                    703 ;	 function putlong
                                    704 ;	-----------------------------------------
      000093                        705 _putlong:
      000093 85 82*1C         [24]  706 	mov	_putlong_a_65536_13,dpl
      000096 85 83*1D         [24]  707 	mov	(_putlong_a_65536_13 + 1),dph
      000099 85 F0*1E         [24]  708 	mov	(_putlong_a_65536_13 + 2),b
      00009C F5*1F            [12]  709 	mov	(_putlong_a_65536_13 + 3),a
                                    710 ;	main.c:84: for(i=0;i<8;i++){
      00009E 7B 00            [12]  711 	mov	r3,#0x00
      0000A0                        712 00116$:
                                    713 ;	main.c:85: if(a!=0||i==0){
      0000A0 E5*1C            [12]  714 	mov	a,_putlong_a_65536_13
      0000A2 45*1D            [12]  715 	orl	a,(_putlong_a_65536_13 + 1)
      0000A4 45*1E            [12]  716 	orl	a,(_putlong_a_65536_13 + 2)
      0000A6 45*1F            [12]  717 	orl	a,(_putlong_a_65536_13 + 3)
      0000A8 70 03            [24]  718 	jnz	00104$
      0000AA EB               [12]  719 	mov	a,r3
      0000AB 70 67            [24]  720 	jnz	00105$
      0000AD                        721 00104$:
                                    722 ;	main.c:86: c=LedSegs[a%10];
      0000AD 75*00 0A         [24]  723 	mov	__modulong_PARM_2,#0x0a
      0000B0 E4               [12]  724 	clr	a
      0000B1 F5*01            [12]  725 	mov	(__modulong_PARM_2 + 1),a
      0000B3 F5*02            [12]  726 	mov	(__modulong_PARM_2 + 2),a
      0000B5 F5*03            [12]  727 	mov	(__modulong_PARM_2 + 3),a
      0000B7 85*1C 82         [24]  728 	mov	dpl,_putlong_a_65536_13
      0000BA 85*1D 83         [24]  729 	mov	dph,(_putlong_a_65536_13 + 1)
      0000BD 85*1E F0         [24]  730 	mov	b,(_putlong_a_65536_13 + 2)
      0000C0 E5*1F            [12]  731 	mov	a,(_putlong_a_65536_13 + 3)
      0000C2 C0 03            [24]  732 	push	ar3
      0000C4 12r00r00         [24]  733 	lcall	__modulong
      0000C7 AA 82            [24]  734 	mov	r2,dpl
      0000C9 AD 83            [24]  735 	mov	r5,dph
      0000CB D0 03            [24]  736 	pop	ar3
      0000CD EA               [12]  737 	mov	a,r2
      0000CE 24r00            [12]  738 	add	a,#_LedSegs
      0000D0 F5 82            [12]  739 	mov	dpl,a
      0000D2 ED               [12]  740 	mov	a,r5
      0000D3 34s00            [12]  741 	addc	a,#(_LedSegs >> 8)
      0000D5 F5 83            [12]  742 	mov	dph,a
      0000D7 E4               [12]  743 	clr	a
      0000D8 93               [24]  744 	movc	a,@a+dptr
      0000D9 FF               [12]  745 	mov	r7,a
                                    746 ;	main.c:87: if(i==3||i==6)c&=0xfe;
      0000DA BB 03 02         [24]  747 	cjne	r3,#0x03,00168$
      0000DD 80 03            [24]  748 	sjmp	00101$
      0000DF                        749 00168$:
      0000DF BB 06 03         [24]  750 	cjne	r3,#0x06,00102$
      0000E2                        751 00101$:
      0000E2 53 07 FE         [24]  752 	anl	ar7,#0xfe
      0000E5                        753 00102$:
                                    754 ;	main.c:88: buf[i]=c;
      0000E5 EB               [12]  755 	mov	a,r3
      0000E6 24r08            [12]  756 	add	a,#_putlong_buf_65536_14
      0000E8 F8               [12]  757 	mov	r0,a
      0000E9 A6 07            [24]  758 	mov	@r0,ar7
                                    759 ;	main.c:89: a/=10;
      0000EB 75*00 0A         [24]  760 	mov	__divulong_PARM_2,#0x0a
      0000EE E4               [12]  761 	clr	a
      0000EF F5*01            [12]  762 	mov	(__divulong_PARM_2 + 1),a
      0000F1 F5*02            [12]  763 	mov	(__divulong_PARM_2 + 2),a
      0000F3 F5*03            [12]  764 	mov	(__divulong_PARM_2 + 3),a
      0000F5 85*1C 82         [24]  765 	mov	dpl,_putlong_a_65536_13
      0000F8 85*1D 83         [24]  766 	mov	dph,(_putlong_a_65536_13 + 1)
      0000FB 85*1E F0         [24]  767 	mov	b,(_putlong_a_65536_13 + 2)
      0000FE E5*1F            [12]  768 	mov	a,(_putlong_a_65536_13 + 3)
      000100 C0 03            [24]  769 	push	ar3
      000102 12r00r00         [24]  770 	lcall	__divulong
      000105 85 82*1C         [24]  771 	mov	_putlong_a_65536_13,dpl
      000108 85 83*1D         [24]  772 	mov	(_putlong_a_65536_13 + 1),dph
      00010B 85 F0*1E         [24]  773 	mov	(_putlong_a_65536_13 + 2),b
      00010E F5*1F            [12]  774 	mov	(_putlong_a_65536_13 + 3),a
      000110 D0 03            [24]  775 	pop	ar3
      000112 80 06            [24]  776 	sjmp	00117$
      000114                        777 00105$:
                                    778 ;	main.c:91: buf[i]=0xff;
      000114 EB               [12]  779 	mov	a,r3
      000115 24r08            [12]  780 	add	a,#_putlong_buf_65536_14
      000117 F8               [12]  781 	mov	r0,a
      000118 76 FF            [12]  782 	mov	@r0,#0xff
      00011A                        783 00117$:
                                    784 ;	main.c:84: for(i=0;i<8;i++){
      00011A 0B               [12]  785 	inc	r3
      00011B BB 08 00         [24]  786 	cjne	r3,#0x08,00171$
      00011E                        787 00171$:
      00011E 50 03            [24]  788 	jnc	00172$
      000120 02r00rA0         [24]  789 	ljmp	00116$
      000123                        790 00172$:
                                    791 ;	main.c:94: while(a>0){
      000123                        792 00110$:
      000123 E5*1C            [12]  793 	mov	a,_putlong_a_65536_13
      000125 45*1D            [12]  794 	orl	a,(_putlong_a_65536_13 + 1)
      000127 45*1E            [12]  795 	orl	a,(_putlong_a_65536_13 + 2)
      000129 45*1F            [12]  796 	orl	a,(_putlong_a_65536_13 + 3)
      00012B 60 69            [24]  797 	jz	00112$
                                    798 ;	main.c:95: for(i=0;i<7;i++)buf[i]=buf[i+1];
      00012D 7F 00            [12]  799 	mov	r7,#0x00
      00012F                        800 00118$:
      00012F EF               [12]  801 	mov	a,r7
      000130 24r08            [12]  802 	add	a,#_putlong_buf_65536_14
      000132 F9               [12]  803 	mov	r1,a
      000133 8F 06            [24]  804 	mov	ar6,r7
      000135 EE               [12]  805 	mov	a,r6
      000136 04               [12]  806 	inc	a
      000137 24r08            [12]  807 	add	a,#_putlong_buf_65536_14
      000139 F8               [12]  808 	mov	r0,a
      00013A 86 06            [24]  809 	mov	ar6,@r0
      00013C A7 06            [24]  810 	mov	@r1,ar6
      00013E 0F               [12]  811 	inc	r7
      00013F BF 07 00         [24]  812 	cjne	r7,#0x07,00174$
      000142                        813 00174$:
      000142 40 EB            [24]  814 	jc	00118$
                                    815 ;	main.c:96: buf[7]=LedSegs[a%10];
      000144 75*00 0A         [24]  816 	mov	__modulong_PARM_2,#0x0a
      000147 E4               [12]  817 	clr	a
      000148 F5*01            [12]  818 	mov	(__modulong_PARM_2 + 1),a
      00014A F5*02            [12]  819 	mov	(__modulong_PARM_2 + 2),a
      00014C F5*03            [12]  820 	mov	(__modulong_PARM_2 + 3),a
      00014E 85*1C 82         [24]  821 	mov	dpl,_putlong_a_65536_13
      000151 85*1D 83         [24]  822 	mov	dph,(_putlong_a_65536_13 + 1)
      000154 85*1E F0         [24]  823 	mov	b,(_putlong_a_65536_13 + 2)
      000157 E5*1F            [12]  824 	mov	a,(_putlong_a_65536_13 + 3)
      000159 12r00r00         [24]  825 	lcall	__modulong
      00015C AC 82            [24]  826 	mov	r4,dpl
      00015E AD 83            [24]  827 	mov	r5,dph
      000160 EC               [12]  828 	mov	a,r4
      000161 24r00            [12]  829 	add	a,#_LedSegs
      000163 F5 82            [12]  830 	mov	dpl,a
      000165 ED               [12]  831 	mov	a,r5
      000166 34s00            [12]  832 	addc	a,#(_LedSegs >> 8)
      000168 F5 83            [12]  833 	mov	dph,a
      00016A E4               [12]  834 	clr	a
      00016B 93               [24]  835 	movc	a,@a+dptr
      00016C FF               [12]  836 	mov	r7,a
      00016D 78r0F            [12]  837 	mov	r0,#(_putlong_buf_65536_14 + 0x0007)
      00016F A6 07            [24]  838 	mov	@r0,ar7
                                    839 ;	main.c:97: a/=10;
      000171 75*00 0A         [24]  840 	mov	__divulong_PARM_2,#0x0a
      000174 E4               [12]  841 	clr	a
      000175 F5*01            [12]  842 	mov	(__divulong_PARM_2 + 1),a
      000177 F5*02            [12]  843 	mov	(__divulong_PARM_2 + 2),a
      000179 F5*03            [12]  844 	mov	(__divulong_PARM_2 + 3),a
      00017B 85*1C 82         [24]  845 	mov	dpl,_putlong_a_65536_13
      00017E 85*1D 83         [24]  846 	mov	dph,(_putlong_a_65536_13 + 1)
      000181 85*1E F0         [24]  847 	mov	b,(_putlong_a_65536_13 + 2)
      000184 E5*1F            [12]  848 	mov	a,(_putlong_a_65536_13 + 3)
      000186 12r00r00         [24]  849 	lcall	__divulong
      000189 85 82*1C         [24]  850 	mov	_putlong_a_65536_13,dpl
      00018C 85 83*1D         [24]  851 	mov	(_putlong_a_65536_13 + 1),dph
      00018F 85 F0*1E         [24]  852 	mov	(_putlong_a_65536_13 + 2),b
      000192 F5*1F            [12]  853 	mov	(_putlong_a_65536_13 + 3),a
      000194 80 8D            [24]  854 	sjmp	00110$
      000196                        855 00112$:
                                    856 ;	main.c:99: if(gatelost)buf[0]&=0xfe;
      000196 30*02 0A         [24]  857 	jnb	_gatelost,00132$
      000199 78r08            [12]  858 	mov	r0,#_putlong_buf_65536_14
      00019B 86 07            [24]  859 	mov	ar7,@r0
      00019D 74 FE            [12]  860 	mov	a,#0xfe
      00019F 5F               [12]  861 	anl	a,r7
      0001A0 78r08            [12]  862 	mov	r0,#_putlong_buf_65536_14
      0001A2 F6               [12]  863 	mov	@r0,a
                                    864 ;	main.c:100: for(i=0;i<8;i++)leds[i]=buf[i];
      0001A3                        865 00132$:
      0001A3 7F 00            [12]  866 	mov	r7,#0x00
      0001A5                        867 00120$:
      0001A5 EF               [12]  868 	mov	a,r7
      0001A6 24r00            [12]  869 	add	a,#_leds
      0001A8 F9               [12]  870 	mov	r1,a
      0001A9 EF               [12]  871 	mov	a,r7
      0001AA 24r08            [12]  872 	add	a,#_putlong_buf_65536_14
      0001AC F8               [12]  873 	mov	r0,a
      0001AD 86 06            [24]  874 	mov	ar6,@r0
      0001AF A7 06            [24]  875 	mov	@r1,ar6
      0001B1 0F               [12]  876 	inc	r7
      0001B2 BF 08 00         [24]  877 	cjne	r7,#0x08,00177$
      0001B5                        878 00177$:
      0001B5 40 EE            [24]  879 	jc	00120$
                                    880 ;	main.c:101: }
      0001B7 22               [24]  881 	ret
                                    882 ;------------------------------------------------------------
                                    883 ;Allocation info for local variables in function 'getCount'
                                    884 ;------------------------------------------------------------
                                    885 ;	main.c:105: unsigned long getCount(){
                                    886 ;	-----------------------------------------
                                    887 ;	 function getCount
                                    888 ;	-----------------------------------------
      0001B8                        889 _getCount:
                                    890 ;	main.c:106: inCnt.b0=P0;
      0001B8 85 80*0C         [24]  891 	mov	_inCnt,_P0
                                    892 ;	main.c:107: inCnt.b1=TL0;
      0001BB 85 8A*0D         [24]  893 	mov	(_inCnt + 0x0001),_TL0
                                    894 ;	main.c:108: inCnt.b2=TH0;
      0001BE 85 8C*0E         [24]  895 	mov	(_inCnt + 0x0002),_TH0
                                    896 ;	main.c:109: return inCnt.l;
      0001C1 85*0C 82         [24]  897 	mov	dpl,_inCnt
      0001C4 85*0D 83         [24]  898 	mov	dph,(_inCnt + 1)
      0001C7 85*0E F0         [24]  899 	mov	b,(_inCnt + 2)
      0001CA E5*0F            [12]  900 	mov	a,(_inCnt + 3)
                                    901 ;	main.c:110: }
      0001CC 22               [24]  902 	ret
                                    903 ;------------------------------------------------------------
                                    904 ;Allocation info for local variables in function 'getFreq'
                                    905 ;------------------------------------------------------------
                                    906 ;	main.c:111: unsigned long getFreq(){
                                    907 ;	-----------------------------------------
                                    908 ;	 function getFreq
                                    909 ;	-----------------------------------------
      0001CD                        910 _getFreq:
                                    911 ;	main.c:112: if(freqcount==0)return 0;
      0001CD E5*18            [12]  912 	mov	a,_freqcount
      0001CF 45*19            [12]  913 	orl	a,(_freqcount + 1)
      0001D1 45*1A            [12]  914 	orl	a,(_freqcount + 2)
      0001D3 45*1B            [12]  915 	orl	a,(_freqcount + 3)
      0001D5 70 07            [24]  916 	jnz	00102$
      0001D7 90 00 00         [24]  917 	mov	dptr,#(0x00&0x00ff)
      0001DA E4               [12]  918 	clr	a
      0001DB F5 F0            [12]  919 	mov	b,a
      0001DD 22               [24]  920 	ret
      0001DE                        921 00102$:
                                    922 ;	main.c:113: return (unsigned long)((((unsigned long long)incount)*mainFreq*10/freqcount+5)/10);
      0001DE A8*14            [24]  923 	mov	r0,_incount
      0001E0 A9*15            [24]  924 	mov	r1,(_incount + 1)
      0001E2 AA*16            [24]  925 	mov	r2,(_incount + 2)
      0001E4 AB*17            [24]  926 	mov	r3,(_incount + 3)
      0001E6 7C 00            [12]  927 	mov	r4,#0x00
      0001E8 7D 00            [12]  928 	mov	r5,#0x00
      0001EA 7E 00            [12]  929 	mov	r6,#0x00
      0001EC 7F 00            [12]  930 	mov	r7,#0x00
      0001EE 85*08*00         [24]  931 	mov	__mullonglong_PARM_2,_mainFreq
      0001F1 85*09*01         [24]  932 	mov	(__mullonglong_PARM_2 + 1),(_mainFreq + 1)
      0001F4 85*0A*02         [24]  933 	mov	(__mullonglong_PARM_2 + 2),(_mainFreq + 2)
      0001F7 85*0B*03         [24]  934 	mov	(__mullonglong_PARM_2 + 3),(_mainFreq + 3)
                                    935 ;	1-genFromRTrack replaced	mov	(__mullonglong_PARM_2 + 4),#0x00
      0001FA 8F*04            [24]  936 	mov	(__mullonglong_PARM_2 + 4),r7
                                    937 ;	1-genFromRTrack replaced	mov	(__mullonglong_PARM_2 + 5),#0x00
      0001FC 8F*05            [24]  938 	mov	(__mullonglong_PARM_2 + 5),r7
                                    939 ;	1-genFromRTrack replaced	mov	(__mullonglong_PARM_2 + 6),#0x00
      0001FE 8F*06            [24]  940 	mov	(__mullonglong_PARM_2 + 6),r7
                                    941 ;	1-genFromRTrack replaced	mov	(__mullonglong_PARM_2 + 7),#0x00
      000200 8F*07            [24]  942 	mov	(__mullonglong_PARM_2 + 7),r7
      000202 88 82            [24]  943 	mov	dpl,r0
      000204 89 83            [24]  944 	mov	dph,r1
      000206 8A F0            [24]  945 	mov	b,r2
      000208 EB               [12]  946 	mov	a,r3
      000209 12r00r00         [24]  947 	lcall	__mullonglong
      00020C 85 82*00         [24]  948 	mov	__mullonglong_PARM_2,dpl
      00020F 85 83*01         [24]  949 	mov	(__mullonglong_PARM_2 + 1),dph
      000212 85 F0*02         [24]  950 	mov	(__mullonglong_PARM_2 + 2),b
      000215 F5*03            [12]  951 	mov	(__mullonglong_PARM_2 + 3),a
      000217 8C*04            [24]  952 	mov	(__mullonglong_PARM_2 + 4),r4
      000219 8D*05            [24]  953 	mov	(__mullonglong_PARM_2 + 5),r5
      00021B 8E*06            [24]  954 	mov	(__mullonglong_PARM_2 + 6),r6
      00021D 8F*07            [24]  955 	mov	(__mullonglong_PARM_2 + 7),r7
      00021F 90 00 0A         [24]  956 	mov	dptr,#(0x0a&0x00ff)
      000222 E4               [12]  957 	clr	a
      000223 F5 F0            [12]  958 	mov	b,a
      000225 FC               [12]  959 	mov	r4,a
      000226 FD               [12]  960 	mov	r5,a
      000227 FE               [12]  961 	mov	r6,a
      000228 FF               [12]  962 	mov	r7,a
      000229 12r00r00         [24]  963 	lcall	__mullonglong
      00022C A8 82            [24]  964 	mov	r0,dpl
      00022E A9 83            [24]  965 	mov	r1,dph
      000230 AA F0            [24]  966 	mov	r2,b
      000232 FB               [12]  967 	mov	r3,a
      000233 85*18*00         [24]  968 	mov	__divulonglong_PARM_2,_freqcount
      000236 85*19*01         [24]  969 	mov	(__divulonglong_PARM_2 + 1),(_freqcount + 1)
      000239 85*1A*02         [24]  970 	mov	(__divulonglong_PARM_2 + 2),(_freqcount + 2)
      00023C 85*1B*03         [24]  971 	mov	(__divulonglong_PARM_2 + 3),(_freqcount + 3)
      00023F 75*04 00         [24]  972 	mov	(__divulonglong_PARM_2 + 4),#0x00
      000242 75*05 00         [24]  973 	mov	(__divulonglong_PARM_2 + 5),#0x00
      000245 75*06 00         [24]  974 	mov	(__divulonglong_PARM_2 + 6),#0x00
      000248 75*07 00         [24]  975 	mov	(__divulonglong_PARM_2 + 7),#0x00
      00024B 88 82            [24]  976 	mov	dpl,r0
      00024D 89 83            [24]  977 	mov	dph,r1
      00024F 8A F0            [24]  978 	mov	b,r2
      000251 EB               [12]  979 	mov	a,r3
      000252 12r00r00         [24]  980 	lcall	__divulonglong
      000255 A8 82            [24]  981 	mov	r0,dpl
      000257 A9 83            [24]  982 	mov	r1,dph
      000259 AA F0            [24]  983 	mov	r2,b
      00025B FB               [12]  984 	mov	r3,a
      00025C 74 05            [12]  985 	mov	a,#0x05
      00025E 28               [12]  986 	add	a,r0
      00025F F8               [12]  987 	mov	r0,a
      000260 E4               [12]  988 	clr	a
      000261 39               [12]  989 	addc	a,r1
      000262 F9               [12]  990 	mov	r1,a
      000263 E4               [12]  991 	clr	a
      000264 3A               [12]  992 	addc	a,r2
      000265 FA               [12]  993 	mov	r2,a
      000266 E4               [12]  994 	clr	a
      000267 3B               [12]  995 	addc	a,r3
      000268 FB               [12]  996 	mov	r3,a
      000269 E4               [12]  997 	clr	a
      00026A 3C               [12]  998 	addc	a,r4
      00026B FC               [12]  999 	mov	r4,a
      00026C E4               [12] 1000 	clr	a
      00026D 3D               [12] 1001 	addc	a,r5
      00026E FD               [12] 1002 	mov	r5,a
      00026F E4               [12] 1003 	clr	a
      000270 3E               [12] 1004 	addc	a,r6
      000271 FE               [12] 1005 	mov	r6,a
      000272 E4               [12] 1006 	clr	a
      000273 3F               [12] 1007 	addc	a,r7
      000274 FF               [12] 1008 	mov	r7,a
      000275 75*00 0A         [24] 1009 	mov	__divulonglong_PARM_2,#0x0a
      000278 E4               [12] 1010 	clr	a
      000279 F5*01            [12] 1011 	mov	(__divulonglong_PARM_2 + 1),a
      00027B F5*02            [12] 1012 	mov	(__divulonglong_PARM_2 + 2),a
      00027D F5*03            [12] 1013 	mov	(__divulonglong_PARM_2 + 3),a
      00027F F5*04            [12] 1014 	mov	(__divulonglong_PARM_2 + 4),a
      000281 F5*05            [12] 1015 	mov	(__divulonglong_PARM_2 + 5),a
      000283 F5*06            [12] 1016 	mov	(__divulonglong_PARM_2 + 6),a
      000285 F5*07            [12] 1017 	mov	(__divulonglong_PARM_2 + 7),a
      000287 88 82            [24] 1018 	mov	dpl,r0
      000289 89 83            [24] 1019 	mov	dph,r1
      00028B 8A F0            [24] 1020 	mov	b,r2
      00028D EB               [12] 1021 	mov	a,r3
                                   1022 ;	main.c:114: }
      00028E 02r00r00         [24] 1023 	ljmp	__divulonglong
                                   1024 ;------------------------------------------------------------
                                   1025 ;Allocation info for local variables in function 'reset'
                                   1026 ;------------------------------------------------------------
                                   1027 ;	main.c:115: void reset(){
                                   1028 ;	-----------------------------------------
                                   1029 ;	 function reset
                                   1030 ;	-----------------------------------------
      000291                       1031 _reset:
                                   1032 ;	main.c:116: GATECTL=0;
                                   1033 ;	assignBit
      000291 C2 B6            [12] 1034 	clr	_P3_6
                                   1035 ;	main.c:117: TR0=0;TR1=0;
                                   1036 ;	assignBit
      000293 C2 8C            [12] 1037 	clr	_TR0
                                   1038 ;	assignBit
      000295 C2 8E            [12] 1039 	clr	_TR1
                                   1040 ;	main.c:118: inCnt.b0=P0;
      000297 85 80*0C         [24] 1041 	mov	_inCnt,_P0
                                   1042 ;	main.c:119: inCnt.b1=TL0;
      00029A 85 8A*0D         [24] 1043 	mov	(_inCnt + 0x0001),_TL0
                                   1044 ;	main.c:120: inCnt.b2=TH0;
      00029D 85 8C*0E         [24] 1045 	mov	(_inCnt + 0x0002),_TH0
                                   1046 ;	main.c:121: incount=inCnt.l;
      0002A0 85*0C*14         [24] 1047 	mov	_incount,(_inCnt + 0)
      0002A3 85*0D*15         [24] 1048 	mov	(_incount + 1),(_inCnt + 1)
      0002A6 85*0E*16         [24] 1049 	mov	(_incount + 2),(_inCnt + 2)
      0002A9 85*0F*17         [24] 1050 	mov	(_incount + 3),(_inCnt + 3)
                                   1051 ;	main.c:122: inCnt.b3=0;
      0002AC 75*0F 00         [24] 1052 	mov	(_inCnt + 0x0003),#0x00
                                   1053 ;	main.c:123: freqCnt.b0=P2;
      0002AF 85 A0*10         [24] 1054 	mov	_freqCnt,_P2
                                   1055 ;	main.c:124: freqCnt.b1=TL1;
      0002B2 85 8B*11         [24] 1056 	mov	(_freqCnt + 0x0001),_TL1
                                   1057 ;	main.c:125: freqCnt.b2=TH1;
      0002B5 85 8D*12         [24] 1058 	mov	(_freqCnt + 0x0002),_TH1
                                   1059 ;	main.c:126: freqcount=freqCnt.l;
      0002B8 85*10*18         [24] 1060 	mov	_freqcount,(_freqCnt + 0)
      0002BB 85*11*19         [24] 1061 	mov	(_freqcount + 1),(_freqCnt + 1)
      0002BE 85*12*1A         [24] 1062 	mov	(_freqcount + 2),(_freqCnt + 2)
      0002C1 85*13*1B         [24] 1063 	mov	(_freqcount + 3),(_freqCnt + 3)
                                   1064 ;	main.c:127: freqCnt.b3=0;
      0002C4 75*13 00         [24] 1065 	mov	(_freqCnt + 0x0003),#0x00
                                   1066 ;	main.c:128: CLR=1;
                                   1067 ;	assignBit
      0002C7 D2 B7            [12] 1068 	setb	_P3_7
                                   1069 ;	main.c:129: TH0=TL0=TH1=TL1=0;
      0002C9 75 8B 00         [24] 1070 	mov	_TL1,#0x00
      0002CC 75 8D 00         [24] 1071 	mov	_TH1,#0x00
      0002CF 75 8A 00         [24] 1072 	mov	_TL0,#0x00
      0002D2 75 8C 00         [24] 1073 	mov	_TH0,#0x00
                                   1074 ;	main.c:130: overflow=false;
                                   1075 ;	assignBit
      0002D5 C2*01            [12] 1076 	clr	_overflow
                                   1077 ;	main.c:131: CLR=0;
                                   1078 ;	assignBit
      0002D7 C2 B7            [12] 1079 	clr	_P3_7
                                   1080 ;	main.c:132: TR0=1;TR1=1;
                                   1081 ;	assignBit
      0002D9 D2 8C            [12] 1082 	setb	_TR0
                                   1083 ;	assignBit
      0002DB D2 8E            [12] 1084 	setb	_TR1
                                   1085 ;	main.c:133: GATECTL=1;
                                   1086 ;	assignBit
      0002DD D2 B6            [12] 1087 	setb	_P3_6
                                   1088 ;	main.c:134: }
      0002DF 22               [24] 1089 	ret
                                   1090 ;------------------------------------------------------------
                                   1091 ;Allocation info for local variables in function 'readKey'
                                   1092 ;------------------------------------------------------------
                                   1093 ;keylong                   Allocated with name '_readKey_keylong_65536_25'
                                   1094 ;gotkey                    Allocated with name '_readKey_gotkey_65536_25'
                                   1095 ;k                         Allocated to registers r7 
                                   1096 ;key                       Allocated to registers r6 
                                   1097 ;------------------------------------------------------------
                                   1098 ;	main.c:137: unsigned char readKey(){
                                   1099 ;	-----------------------------------------
                                   1100 ;	 function readKey
                                   1101 ;	-----------------------------------------
      0002E0                       1102 _readKey:
                                   1103 ;	main.c:140: unsigned char k=0,key=0;
      0002E0 7F 00            [12] 1104 	mov	r7,#0x00
      0002E2 7E 00            [12] 1105 	mov	r6,#0x00
                                   1106 ;	main.c:142: if(!KEY)key=1;if(!KEY2)key=2;
      0002E4 20 90 02         [24] 1107 	jb	_P1_0,00102$
      0002E7 7E 01            [12] 1108 	mov	r6,#0x01
      0002E9                       1109 00102$:
      0002E9 20 91 02         [24] 1110 	jb	_P1_1,00104$
      0002EC 7E 02            [12] 1111 	mov	r6,#0x02
      0002EE                       1112 00104$:
                                   1113 ;	main.c:143: if(key!=0){
      0002EE EE               [12] 1114 	mov	a,r6
      0002EF 60 24            [24] 1115 	jz	00116$
                                   1116 ;	main.c:144: gotkey=key;
      0002F1 8E*22            [24] 1117 	mov	_readKey_gotkey_65536_25,r6
                                   1118 ;	main.c:145: if(keydly>0)keydly--;
      0002F3 E5*05            [12] 1119 	mov	a,_keydly
      0002F5 60 02            [24] 1120 	jz	00106$
      0002F7 15*05            [12] 1121 	dec	_keydly
      0002F9                       1122 00106$:
                                   1123 ;	main.c:146: if(keylong>0)keylong--;
      0002F9 E5*20            [12] 1124 	mov	a,_readKey_keylong_65536_25
      0002FB 45*21            [12] 1125 	orl	a,(_readKey_keylong_65536_25 + 1)
      0002FD 60 0B            [24] 1126 	jz	00110$
      0002FF 15*20            [12] 1127 	dec	_readKey_keylong_65536_25
      000301 74 FF            [12] 1128 	mov	a,#0xff
      000303 B5*20 02         [24] 1129 	cjne	a,_readKey_keylong_65536_25,00157$
      000306 15*21            [12] 1130 	dec	(_readKey_keylong_65536_25 + 1)
      000308                       1131 00157$:
      000308 80 1F            [24] 1132 	sjmp	00117$
      00030A                       1133 00110$:
                                   1134 ;	main.c:148: if(!longdown){
      00030A 20*04 1C         [24] 1135 	jb	_readKey_longdown_65536_25,00117$
                                   1136 ;	main.c:149: longdown=true;
                                   1137 ;	assignBit
      00030D D2*04            [12] 1138 	setb	_readKey_longdown_65536_25
                                   1139 ;	main.c:150: k=key+2;
      00030F 74 02            [12] 1140 	mov	a,#0x02
      000311 2E               [12] 1141 	add	a,r6
      000312 FF               [12] 1142 	mov	r7,a
      000313 80 14            [24] 1143 	sjmp	00117$
      000315                       1144 00116$:
                                   1145 ;	main.c:154: if(keydly==0 && !longdown)k=gotkey;
      000315 E5*05            [12] 1146 	mov	a,_keydly
      000317 70 05            [24] 1147 	jnz	00113$
      000319 20*04 02         [24] 1148 	jb	_readKey_longdown_65536_25,00113$
      00031C AF*22            [24] 1149 	mov	r7,_readKey_gotkey_65536_25
      00031E                       1150 00113$:
                                   1151 ;	main.c:155: keydly=KEYDLY;
      00031E 75*05 32         [24] 1152 	mov	_keydly,#0x32
                                   1153 ;	main.c:156: keylong=KEYLONG;
      000321 75*20 F4         [24] 1154 	mov	_readKey_keylong_65536_25,#0xf4
      000324 75*21 01         [24] 1155 	mov	(_readKey_keylong_65536_25 + 1),#0x01
                                   1156 ;	main.c:157: longdown=false;
                                   1157 ;	assignBit
      000327 C2*04            [12] 1158 	clr	_readKey_longdown_65536_25
      000329                       1159 00117$:
                                   1160 ;	main.c:159: return k;
      000329 8F 82            [24] 1161 	mov	dpl,r7
                                   1162 ;	main.c:160: }
      00032B 22               [24] 1163 	ret
                                   1164 ;------------------------------------------------------------
                                   1165 ;Allocation info for local variables in function 'setmode'
                                   1166 ;------------------------------------------------------------
                                   1167 ;	main.c:162: void setmode(){
                                   1168 ;	-----------------------------------------
                                   1169 ;	 function setmode
                                   1170 ;	-----------------------------------------
      00032C                       1171 _setmode:
                                   1172 ;	main.c:165: switch(readKey()){
      00032C 12r02rE0         [24] 1173 	lcall	_readKey
      00032F AF 82            [24] 1174 	mov	r7,dpl
      000331 BF 01 02         [24] 1175 	cjne	r7,#0x01,00170$
      000334 80 12            [24] 1176 	sjmp	00101$
      000336                       1177 00170$:
      000336 BF 02 02         [24] 1178 	cjne	r7,#0x02,00171$
      000339 80 4E            [24] 1179 	sjmp	00106$
      00033B                       1180 00171$:
      00033B BF 03 03         [24] 1181 	cjne	r7,#0x03,00172$
      00033E 02r03rCB         [24] 1182 	ljmp	00111$
      000341                       1183 00172$:
      000341 BF 04 03         [24] 1184 	cjne	r7,#0x04,00173$
      000344 02r03rED         [24] 1185 	ljmp	00115$
      000347                       1186 00173$:
      000347 22               [24] 1187 	ret
                                   1188 ;	main.c:166: case 1:  //+
      000348                       1189 00101$:
                                   1190 ;	main.c:167: switch(mode){
      000348 E4               [12] 1191 	clr	a
      000349 B5*23 02         [24] 1192 	cjne	a,_mode,00174$
      00034C 80 0F            [24] 1193 	sjmp	00102$
      00034E                       1194 00174$:
      00034E 74 01            [12] 1195 	mov	a,#0x01
      000350 B5*23 02         [24] 1196 	cjne	a,_mode,00175$
      000353 80 1E            [24] 1197 	sjmp	00103$
      000355                       1198 00175$:
      000355 74 02            [12] 1199 	mov	a,#0x02
      000357 B5*23 02         [24] 1200 	cjne	a,_mode,00176$
      00035A 80 1A            [24] 1201 	sjmp	00104$
      00035C                       1202 00176$:
      00035C 22               [24] 1203 	ret
                                   1204 ;	main.c:168: case Freq:
      00035D                       1205 00102$:
                                   1206 ;	main.c:169: speed=NORMAL;
      00035D 75*04 64         [24] 1207 	mov	_speed,#0x64
                                   1208 ;	main.c:170: putstr(normal);
      000360 90r00r38         [24] 1209 	mov	dptr,#_normal
      000363 12r00r74         [24] 1210 	lcall	_putstr
                                   1211 ;	main.c:171: reset();
      000366 12r02r91         [24] 1212 	lcall	_reset
                                   1213 ;	main.c:172: gateDelay=16;
      000369 75*03 10         [24] 1214 	mov	_gateDelay,#0x10
                                   1215 ;	main.c:173: delay=1000;
      00036C 75*06 E8         [24] 1216 	mov	_delay,#0xe8
      00036F 75*07 03         [24] 1217 	mov	(_delay + 1),#0x03
                                   1218 ;	main.c:174: break;
      000372 22               [24] 1219 	ret
                                   1220 ;	main.c:175: case Counter:
      000373                       1221 00103$:
                                   1222 ;	main.c:176: GATECTL=!GATECTL;
      000373 B2 B6            [12] 1223 	cpl	_P3_6
                                   1224 ;	main.c:177: break;
      000375 22               [24] 1225 	ret
                                   1226 ;	main.c:178: case Tune:
      000376                       1227 00104$:
                                   1228 ;	main.c:179: ++mainFreq;
      000376 05*08            [12] 1229 	inc	_mainFreq
      000378 E4               [12] 1230 	clr	a
      000379 B5*08 0C         [24] 1231 	cjne	a,_mainFreq,00177$
      00037C 05*09            [12] 1232 	inc	(_mainFreq + 1)
      00037E B5*09 07         [24] 1233 	cjne	a,(_mainFreq + 1),00177$
      000381 05*0A            [12] 1234 	inc	(_mainFreq + 2)
      000383 B5*0A 02         [24] 1235 	cjne	a,(_mainFreq + 2),00177$
      000386 05*0B            [12] 1236 	inc	(_mainFreq + 3)
      000388                       1237 00177$:
                                   1238 ;	main.c:183: break;
      000388 22               [24] 1239 	ret
                                   1240 ;	main.c:184: case 2:  //-
      000389                       1241 00106$:
                                   1242 ;	main.c:185: switch(mode){
      000389 E4               [12] 1243 	clr	a
      00038A B5*23 02         [24] 1244 	cjne	a,_mode,00178$
      00038D 80 0F            [24] 1245 	sjmp	00107$
      00038F                       1246 00178$:
      00038F 74 01            [12] 1247 	mov	a,#0x01
      000391 B5*23 02         [24] 1248 	cjne	a,_mode,00179$
      000394 80 1E            [24] 1249 	sjmp	00108$
      000396                       1250 00179$:
      000396 74 02            [12] 1251 	mov	a,#0x02
      000398 B5*23 02         [24] 1252 	cjne	a,_mode,00180$
      00039B 80 1A            [24] 1253 	sjmp	00109$
      00039D                       1254 00180$:
      00039D 22               [24] 1255 	ret
                                   1256 ;	main.c:186: case Freq:
      00039E                       1257 00107$:
                                   1258 ;	main.c:187: speed=FAST;
      00039E 75*04 0A         [24] 1259 	mov	_speed,#0x0a
                                   1260 ;	main.c:188: putstr(fast);
      0003A1 90r00r30         [24] 1261 	mov	dptr,#_fast
      0003A4 12r00r74         [24] 1262 	lcall	_putstr
                                   1263 ;	main.c:189: reset();
      0003A7 12r02r91         [24] 1264 	lcall	_reset
                                   1265 ;	main.c:190: gateDelay=16;
      0003AA 75*03 10         [24] 1266 	mov	_gateDelay,#0x10
                                   1267 ;	main.c:191: delay=1000;
      0003AD 75*06 E8         [24] 1268 	mov	_delay,#0xe8
      0003B0 75*07 03         [24] 1269 	mov	(_delay + 1),#0x03
                                   1270 ;	main.c:192: break;
                                   1271 ;	main.c:193: case Counter:
      0003B3 22               [24] 1272 	ret
      0003B4                       1273 00108$:
                                   1274 ;	main.c:194: reset();
                                   1275 ;	main.c:195: break;
                                   1276 ;	main.c:196: case Tune:
      0003B4 02r02r91         [24] 1277 	ljmp	_reset
      0003B7                       1278 00109$:
                                   1279 ;	main.c:197: --mainFreq;
      0003B7 15*08            [12] 1280 	dec	_mainFreq
      0003B9 74 FF            [12] 1281 	mov	a,#0xff
      0003BB B5*08 0C         [24] 1282 	cjne	a,_mainFreq,00181$
      0003BE 15*09            [12] 1283 	dec	(_mainFreq + 1)
      0003C0 B5*09 07         [24] 1284 	cjne	a,(_mainFreq + 1),00181$
      0003C3 15*0A            [12] 1285 	dec	(_mainFreq + 2)
      0003C5 B5*0A 02         [24] 1286 	cjne	a,(_mainFreq + 2),00181$
      0003C8 15*0B            [12] 1287 	dec	(_mainFreq + 3)
      0003CA                       1288 00181$:
                                   1289 ;	main.c:201: break;
                                   1290 ;	main.c:202: case 3: //Freq<->counter
      0003CA 22               [24] 1291 	ret
      0003CB                       1292 00111$:
                                   1293 ;	main.c:203: if(mode!=Freq){
      0003CB E5*23            [12] 1294 	mov	a,_mode
      0003CD 60 0B            [24] 1295 	jz	00113$
                                   1296 ;	main.c:204: mode=Freq;
      0003CF 75*23 00         [24] 1297 	mov	_mode,#0x00
                                   1298 ;	main.c:205: putstr(freq);
      0003D2 90r00r28         [24] 1299 	mov	dptr,#_freq
      0003D5 12r00r74         [24] 1300 	lcall	_putstr
      0003D8 80 09            [24] 1301 	sjmp	00114$
      0003DA                       1302 00113$:
                                   1303 ;	main.c:207: mode=Counter;
      0003DA 75*23 01         [24] 1304 	mov	_mode,#0x01
                                   1305 ;	main.c:208: putstr(counter);
      0003DD 90r00r20         [24] 1306 	mov	dptr,#_counter
      0003E0 12r00r74         [24] 1307 	lcall	_putstr
      0003E3                       1308 00114$:
                                   1309 ;	main.c:210: reset();
      0003E3 12r02r91         [24] 1310 	lcall	_reset
                                   1311 ;	main.c:211: delay=1000;
      0003E6 75*06 E8         [24] 1312 	mov	_delay,#0xe8
      0003E9 75*07 03         [24] 1313 	mov	(_delay + 1),#0x03
                                   1314 ;	main.c:213: break;
                                   1315 ;	main.c:214: case 4:
      0003EC 22               [24] 1316 	ret
      0003ED                       1317 00115$:
                                   1318 ;	main.c:215: if(mode!=Freq){
      0003ED E5*23            [12] 1319 	mov	a,_mode
      0003EF 60 0B            [24] 1320 	jz	00117$
                                   1321 ;	main.c:216: mode=Freq;
      0003F1 75*23 00         [24] 1322 	mov	_mode,#0x00
                                   1323 ;	main.c:217: putstr(freq);
      0003F4 90r00r28         [24] 1324 	mov	dptr,#_freq
      0003F7 12r00r74         [24] 1325 	lcall	_putstr
      0003FA 80 09            [24] 1326 	sjmp	00118$
      0003FC                       1327 00117$:
                                   1328 ;	main.c:219: mode=Tune;
      0003FC 75*23 02         [24] 1329 	mov	_mode,#0x02
                                   1330 ;	main.c:220: putstr(finetune);
      0003FF 90r00r40         [24] 1331 	mov	dptr,#_finetune
      000402 12r00r74         [24] 1332 	lcall	_putstr
      000405                       1333 00118$:
                                   1334 ;	main.c:222: reset();
      000405 12r02r91         [24] 1335 	lcall	_reset
                                   1336 ;	main.c:223: delay=1000;
      000408 75*06 E8         [24] 1337 	mov	_delay,#0xe8
      00040B 75*07 03         [24] 1338 	mov	(_delay + 1),#0x03
                                   1339 ;	main.c:226: }
                                   1340 ;	main.c:228: }
      00040E 22               [24] 1341 	ret
                                   1342 ;------------------------------------------------------------
                                   1343 ;Allocation info for local variables in function 'main'
                                   1344 ;------------------------------------------------------------
                                   1345 ;n                         Allocated to registers r0 r1 r2 r3 
                                   1346 ;------------------------------------------------------------
                                   1347 ;	main.c:230: void main(void){
                                   1348 ;	-----------------------------------------
                                   1349 ;	 function main
                                   1350 ;	-----------------------------------------
      00040F                       1351 _main:
                                   1352 ;	main.c:232: PT0=1;PT1=1;
                                   1353 ;	assignBit
      00040F D2 B9            [12] 1354 	setb	_PT0
                                   1355 ;	assignBit
      000411 D2 BB            [12] 1356 	setb	_PT1
                                   1357 ;	main.c:233: PT2=1;
                                   1358 ;	assignBit
      000413 D2 BD            [12] 1359 	setb	_PT2
                                   1360 ;	main.c:234: SCON=0;
      000415 75 98 00         [24] 1361 	mov	_SCON,#0x00
                                   1362 ;	main.c:235: REN=0;
                                   1363 ;	assignBit
      000418 C2 9C            [12] 1364 	clr	_REN
                                   1365 ;	main.c:236: ES=1;
                                   1366 ;	assignBit
      00041A D2 AC            [12] 1367 	setb	_ES
                                   1368 ;	main.c:237: GATECTL=0;
                                   1369 ;	assignBit
      00041C C2 B6            [12] 1370 	clr	_P3_6
                                   1371 ;	main.c:238: CLR=1;
                                   1372 ;	assignBit
      00041E D2 B7            [12] 1373 	setb	_P3_7
                                   1374 ;	main.c:239: TMOD=0x55;
      000420 75 89 55         [24] 1375 	mov	_TMOD,#0x55
                                   1376 ;	main.c:240: TR0=0;TR1=0;ET0=1;ET1=1;
                                   1377 ;	assignBit
      000423 C2 8C            [12] 1378 	clr	_TR0
                                   1379 ;	assignBit
      000425 C2 8E            [12] 1380 	clr	_TR1
                                   1381 ;	assignBit
      000427 D2 A9            [12] 1382 	setb	_ET0
                                   1383 ;	assignBit
      000429 D2 AB            [12] 1384 	setb	_ET1
                                   1385 ;	main.c:241: TH0=0;
      00042B 75 8C 00         [24] 1386 	mov	_TH0,#0x00
                                   1387 ;	main.c:242: TL0=0;
      00042E 75 8A 00         [24] 1388 	mov	_TL0,#0x00
                                   1389 ;	main.c:243: TH1=0;
      000431 75 8D 00         [24] 1390 	mov	_TH1,#0x00
                                   1391 ;	main.c:244: TL1=0;
      000434 75 8B 00         [24] 1392 	mov	_TL1,#0x00
                                   1393 ;	main.c:245: RCAP2H=0xFC;   //10M  1/1000s
      000437 75 CB FC         [24] 1394 	mov	_RCAP2H,#0xfc
                                   1395 ;	main.c:246: RCAP2L=0xBE;
      00043A 75 CA BE         [24] 1396 	mov	_RCAP2L,#0xbe
                                   1397 ;	main.c:247: T2CON=0;
      00043D 75 C8 00         [24] 1398 	mov	_T2CON,#0x00
                                   1399 ;	main.c:248: T2MOD=0;
      000440 75 C9 00         [24] 1400 	mov	_T2MOD,#0x00
                                   1401 ;	main.c:249: TR2=1;
                                   1402 ;	assignBit
      000443 D2 CA            [12] 1403 	setb	_TR2
                                   1404 ;	main.c:250: ET2=1;
                                   1405 ;	assignBit
      000445 D2 AD            [12] 1406 	setb	_ET2
                                   1407 ;	main.c:251: EA=1;
                                   1408 ;	assignBit
      000447 D2 AF            [12] 1409 	setb	_EA
                                   1410 ;	main.c:252: putstr(cymomer);
      000449 90r00r18         [24] 1411 	mov	dptr,#_cymomer
      00044C 12r00r74         [24] 1412 	lcall	_putstr
                                   1413 ;	main.c:253: delay=1000;
      00044F 75*06 E8         [24] 1414 	mov	_delay,#0xe8
      000452 75*07 03         [24] 1415 	mov	(_delay + 1),#0x03
                                   1416 ;	main.c:254: while(1){
      000455                       1417 00124$:
                                   1418 ;	main.c:255: PCON|=1;
      000455 43 87 01         [24] 1419 	orl	_PCON,#0x01
                                   1420 ;	main.c:256: setmode();
      000458 12r03r2C         [24] 1421 	lcall	_setmode
                                   1422 ;	main.c:257: if(delay>0){delay--;continue;}
      00045B E5*06            [12] 1423 	mov	a,_delay
      00045D 45*07            [12] 1424 	orl	a,(_delay + 1)
      00045F 60 0B            [24] 1425 	jz	00102$
      000461 15*06            [12] 1426 	dec	_delay
      000463 74 FF            [12] 1427 	mov	a,#0xff
      000465 B5*06 02         [24] 1428 	cjne	a,_delay,00169$
      000468 15*07            [12] 1429 	dec	(_delay + 1)
      00046A                       1430 00169$:
      00046A 80 E9            [24] 1431 	sjmp	00124$
      00046C                       1432 00102$:
                                   1433 ;	main.c:258: switch(mode){
      00046C E4               [12] 1434 	clr	a
      00046D B5*23 02         [24] 1435 	cjne	a,_mode,00170$
      000470 80 0E            [24] 1436 	sjmp	00103$
      000472                       1437 00170$:
      000472 74 01            [12] 1438 	mov	a,#0x01
      000474 B5*23 02         [24] 1439 	cjne	a,_mode,00171$
      000477 80 2F            [24] 1440 	sjmp	00111$
      000479                       1441 00171$:
      000479 74 02            [12] 1442 	mov	a,#0x02
                                   1443 ;	main.c:259: case Freq:
      00047B B5*23 D7         [24] 1444 	cjne	a,_mode,00124$
      00047E 80 37            [24] 1445 	sjmp	00112$
      000480                       1446 00103$:
                                   1447 ;	main.c:260: if(!GATE&&!GATECTL||gateDelay==0){
      000480 20 B3 03         [24] 1448 	jb	_P3_3,00110$
      000483 30 B6 04         [24] 1449 	jnb	_P3_6,00106$
      000486                       1450 00110$:
      000486 E5*03            [12] 1451 	mov	a,_gateDelay
      000488 70 15            [24] 1452 	jnz	00107$
      00048A                       1453 00106$:
                                   1454 ;	main.c:261: gatelost=gateDelay==0;
      00048A E5*03            [12] 1455 	mov	a,_gateDelay
      00048C B4 01 00         [24] 1456 	cjne	a,#0x01,00176$
      00048F                       1457 00176$:
      00048F 92*02            [24] 1458 	mov	_gatelost,c
                                   1459 ;	main.c:262: reset();
      000491 12r02r91         [24] 1460 	lcall	_reset
                                   1461 ;	main.c:263: putlong(getFreq());
      000494 12r01rCD         [24] 1462 	lcall	_getFreq
      000497 12r00r93         [24] 1463 	lcall	_putlong
                                   1464 ;	main.c:264: gateDelay=16;
      00049A 75*03 10         [24] 1465 	mov	_gateDelay,#0x10
      00049D 80 B6            [24] 1466 	sjmp	00124$
      00049F                       1467 00107$:
                                   1468 ;	main.c:265: }else if(gateDelay==5){
      00049F 74 05            [12] 1469 	mov	a,#0x05
      0004A1 B5*03 B1         [24] 1470 	cjne	a,_gateDelay,00124$
                                   1471 ;	main.c:266: GATECTL=0;
                                   1472 ;	assignBit
      0004A4 C2 B6            [12] 1473 	clr	_P3_6
                                   1474 ;	main.c:268: break;
                                   1475 ;	main.c:269: case Counter:
      0004A6 80 AD            [24] 1476 	sjmp	00124$
      0004A8                       1477 00111$:
                                   1478 ;	main.c:270: putlong(getCount());
      0004A8 12r01rB8         [24] 1479 	lcall	_getCount
      0004AB 12r00r93         [24] 1480 	lcall	_putlong
                                   1481 ;	main.c:271: delay=50;
      0004AE 75*06 32         [24] 1482 	mov	_delay,#0x32
      0004B1 75*07 00         [24] 1483 	mov	(_delay + 1),#0x00
                                   1484 ;	main.c:272: break;
      0004B4 02r04r55         [24] 1485 	ljmp	00124$
                                   1486 ;	main.c:273: case Tune:
      0004B7                       1487 00112$:
                                   1488 ;	main.c:274: if(!GATE&&!GATECTL||gateDelay==0){
      0004B7 20 B3 03         [24] 1489 	jb	_P3_3,00121$
      0004BA 30 B6 04         [24] 1490 	jnb	_P3_6,00117$
      0004BD                       1491 00121$:
      0004BD E5*03            [12] 1492 	mov	a,_gateDelay
      0004BF 70 35            [24] 1493 	jnz	00118$
      0004C1                       1494 00117$:
                                   1495 ;	main.c:275: gatelost=!gatelost;
      0004C1 B2*02            [12] 1496 	cpl	_gatelost
                                   1497 ;	main.c:276: reset();
      0004C3 12r02r91         [24] 1498 	lcall	_reset
                                   1499 ;	main.c:277: n=getFreq();
      0004C6 12r01rCD         [24] 1500 	lcall	_getFreq
      0004C9 AC 82            [24] 1501 	mov	r4,dpl
      0004CB AD 83            [24] 1502 	mov	r5,dph
      0004CD AE F0            [24] 1503 	mov	r6,b
      0004CF FF               [12] 1504 	mov	r7,a
      0004D0 8C 00            [24] 1505 	mov	ar0,r4
      0004D2 8D 01            [24] 1506 	mov	ar1,r5
      0004D4 8E 02            [24] 1507 	mov	ar2,r6
      0004D6 8F 03            [24] 1508 	mov	ar3,r7
                                   1509 ;	main.c:278: if(n==0)n=mainFreq;
      0004D8 EC               [12] 1510 	mov	a,r4
      0004D9 4D               [12] 1511 	orl	a,r5
      0004DA 4E               [12] 1512 	orl	a,r6
      0004DB 4F               [12] 1513 	orl	a,r7
      0004DC 70 08            [24] 1514 	jnz	00114$
      0004DE A8*08            [24] 1515 	mov	r0,_mainFreq
      0004E0 A9*09            [24] 1516 	mov	r1,(_mainFreq + 1)
      0004E2 AA*0A            [24] 1517 	mov	r2,(_mainFreq + 2)
      0004E4 AB*0B            [24] 1518 	mov	r3,(_mainFreq + 3)
      0004E6                       1519 00114$:
                                   1520 ;	main.c:279: putlong(n);
      0004E6 88 82            [24] 1521 	mov	dpl,r0
      0004E8 89 83            [24] 1522 	mov	dph,r1
      0004EA 8A F0            [24] 1523 	mov	b,r2
      0004EC EB               [12] 1524 	mov	a,r3
      0004ED 12r00r93         [24] 1525 	lcall	_putlong
                                   1526 ;	main.c:280: gateDelay=16;
      0004F0 75*03 10         [24] 1527 	mov	_gateDelay,#0x10
      0004F3 02r04r55         [24] 1528 	ljmp	00124$
      0004F6                       1529 00118$:
                                   1530 ;	main.c:281: }else if(gateDelay==5){
      0004F6 74 05            [12] 1531 	mov	a,#0x05
      0004F8 B5*03 02         [24] 1532 	cjne	a,_gateDelay,00183$
      0004FB 80 03            [24] 1533 	sjmp	00184$
      0004FD                       1534 00183$:
      0004FD 02r04r55         [24] 1535 	ljmp	00124$
      000500                       1536 00184$:
                                   1537 ;	main.c:282: GATECTL=0;
                                   1538 ;	assignBit
      000500 C2 B6            [12] 1539 	clr	_P3_6
                                   1540 ;	main.c:285: }
                                   1541 ;	main.c:288: }
      000502 02r04r55         [24] 1542 	ljmp	00124$
                                   1543 	.area CSEG    (CODE)
                                   1544 	.area CONST   (CODE)
      000000                       1545 _LedSegs:
      000000 03                    1546 	.db #0x03	; 3
      000001 9F                    1547 	.db #0x9f	; 159
      000002 25                    1548 	.db #0x25	; 37
      000003 0D                    1549 	.db #0x0d	; 13
      000004 99                    1550 	.db #0x99	; 153
      000005 49                    1551 	.db #0x49	; 73	'I'
      000006 41                    1552 	.db #0x41	; 65	'A'
      000007 1F                    1553 	.db #0x1f	; 31
      000008 01                    1554 	.db #0x01	; 1
      000009 09                    1555 	.db #0x09	; 9
      00000A 11                    1556 	.db #0x11	; 17
      00000B C1                    1557 	.db #0xc1	; 193
      00000C 63                    1558 	.db #0x63	; 99	'c'
      00000D 85                    1559 	.db #0x85	; 133
      00000E 61                    1560 	.db #0x61	; 97	'a'
      00000F 71                    1561 	.db #0x71	; 113	'q'
      000010                       1562 _LedDigit:
      000010 01                    1563 	.db #0x01	; 1
      000011 02                    1564 	.db #0x02	; 2
      000012 04                    1565 	.db #0x04	; 4
      000013 08                    1566 	.db #0x08	; 8
      000014 10                    1567 	.db #0x10	; 16
      000015 20                    1568 	.db #0x20	; 32
      000016 40                    1569 	.db #0x40	; 64
      000017 80                    1570 	.db #0x80	; 128
      000018                       1571 _cymomer:
      000018 63                    1572 	.db #0x63	; 99	'c'
      000019 89                    1573 	.db #0x89	; 137
      00001A 55                    1574 	.db #0x55	; 85	'U'
      00001B C5                    1575 	.db #0xc5	; 197
      00001C 55                    1576 	.db #0x55	; 85	'U'
      00001D 21                    1577 	.db #0x21	; 33
      00001E F5                    1578 	.db #0xf5	; 245
      00001F FF                    1579 	.db #0xff	; 255
      000020                       1580 _counter:
      000020 63                    1581 	.db #0x63	; 99	'c'
      000021 C5                    1582 	.db #0xc5	; 197
      000022 C7                    1583 	.db #0xc7	; 199
      000023 D5                    1584 	.db #0xd5	; 213
      000024 E1                    1585 	.db #0xe1	; 225
      000025 21                    1586 	.db #0x21	; 33
      000026 F5                    1587 	.db #0xf5	; 245
      000027 FF                    1588 	.db #0xff	; 255
      000028                       1589 _freq:
      000028 71                    1590 	.db #0x71	; 113	'q'
      000029 F5                    1591 	.db #0xf5	; 245
      00002A 21                    1592 	.db #0x21	; 33
      00002B 19                    1593 	.db #0x19	; 25
      00002C FF                    1594 	.db #0xff	; 255
      00002D FF                    1595 	.db #0xff	; 255
      00002E FF                    1596 	.db #0xff	; 255
      00002F FF                    1597 	.db #0xff	; 255
      000030                       1598 _fast:
      000030 43                    1599 	.db #0x43	; 67	'C'
      000031 11                    1600 	.db #0x11	; 17
      000032 E1                    1601 	.db #0xe1	; 225
      000033 61                    1602 	.db #0x61	; 97	'a'
      000034 FF                    1603 	.db #0xff	; 255
      000035 02                    1604 	.db #0x02	; 2
      000036 9F                    1605 	.db #0x9f	; 159
      000037 4B                    1606 	.db #0x4b	; 75	'K'
      000038                       1607 _normal:
      000038 43                    1608 	.db #0x43	; 67	'C'
      000039 11                    1609 	.db #0x11	; 17
      00003A E1                    1610 	.db #0xe1	; 225
      00003B 61                    1611 	.db #0x61	; 97	'a'
      00003C FF                    1612 	.db #0xff	; 255
      00003D 9E                    1613 	.db #0x9e	; 158
      00003E 03                    1614 	.db #0x03	; 3
      00003F 4B                    1615 	.db #0x4b	; 75	'K'
      000040                       1616 _finetune:
      000040 71                    1617 	.db #0x71	; 113	'q'
      000041 DF                    1618 	.db #0xdf	; 223
      000042 D5                    1619 	.db #0xd5	; 213
      000043 21                    1620 	.db #0x21	; 33
      000044 E1                    1621 	.db #0xe1	; 225
      000045 C7                    1622 	.db #0xc7	; 199
      000046 D5                    1623 	.db #0xd5	; 213
      000047 21                    1624 	.db #0x21	; 33
                                   1625 	.area XINIT   (CODE)
                                   1626 	.area CABS    (ABS,CODE)
